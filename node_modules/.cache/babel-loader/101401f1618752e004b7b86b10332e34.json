{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Cell.js\";\nimport React from 'react';\nimport produce from 'immer';\n\nconst Cell = ({\n  cell,\n  setGrid,\n  setDisable,\n  numberOfCells,\n  setNumberOfCells,\n  numberOfCellsRef\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      setGrid(grid => {\n        return produce(grid, gridCopy => {\n          setNumberOfCells(num => {\n            return produce(num, numCopy => {\n              if (gridCopy[cell.coor[0]][cell.coor[1]].alive) {\n                numCopy = num + 1;\n                numberOfCellsRef.current = numCopy;\n              } else if (gridCopy[cell.coor[0]][cell.coor[1]].alive === false) {\n                numCopy = num - 1;\n                numberOfCellsRef.current = numCopy;\n              }\n            });\n          });\n          gridCopy[cell.coor[0]][cell.coor[1]].alive = grid[cell.coor[0]][cell.coor[1]].alive ? false : true; // setNumberOfCells(num => {\n          //   return produce(num, numCopy => {\n          //   })\n          // })\n        });\n      }); // if (cell.alive === true) {\n      //   let num = numberOfCells + 1;\n      //   setNumberOfCells(num);\n      //   numberOfCellsRef.current = num;\n      // } else {\n      //   let num = numberOfCells - 1;\n      //   setNumberOfCells(num);\n      //   numberOfCellsRef.current = num;\n      // }\n\n      setDisable(false);\n    },\n    style: {\n      border: '1px solid gray',\n      height: '15px',\n      width: '15px',\n      backgroundColor: `${cell.alive ? 'black' : 'white'}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Cell;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Cell.js"],"names":["React","produce","Cell","cell","setGrid","setDisable","numberOfCells","setNumberOfCells","numberOfCellsRef","grid","gridCopy","num","numCopy","coor","alive","current","border","height","width","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,OAApB;;AAEA,MAAMC,IAAI,GAAG,CAAE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,UAAjB;AAA6BC,EAAAA,aAA7B;AAA4CC,EAAAA,gBAA5C;AAA8DC,EAAAA;AAA9D,CAAF,KAAuF;AAElG,sBACE;AAAK,IAAA,OAAO,EAAE,MAAM;AAClBJ,MAAAA,OAAO,CAACK,IAAI,IAAI;AACd,eAAOR,OAAO,CAACQ,IAAD,EAAOC,QAAQ,IAAI;AAE/BH,UAAAA,gBAAgB,CAACI,GAAG,IAAI;AACtB,mBAAOV,OAAO,CAACU,GAAD,EAAMC,OAAO,IAAI;AAC7B,kBAAIF,QAAQ,CAACP,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAAR,CAAuBV,IAAI,CAACU,IAAL,CAAU,CAAV,CAAvB,EAAqCC,KAAzC,EAAgD;AAC9CF,gBAAAA,OAAO,GAAGD,GAAG,GAAG,CAAhB;AACAH,gBAAAA,gBAAgB,CAACO,OAAjB,GAA2BH,OAA3B;AACD,eAHD,MAGO,IAAIF,QAAQ,CAACP,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAAR,CAAuBV,IAAI,CAACU,IAAL,CAAU,CAAV,CAAvB,EAAqCC,KAArC,KAA+C,KAAnD,EAA0D;AAC/DF,gBAAAA,OAAO,GAAGD,GAAG,GAAG,CAAhB;AACAH,gBAAAA,gBAAgB,CAACO,OAAjB,GAA2BH,OAA3B;AACD;AAEF,aATa,CAAd;AAUD,WAXe,CAAhB;AAaAF,UAAAA,QAAQ,CAACP,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAAR,CAAuBV,IAAI,CAACU,IAAL,CAAU,CAAV,CAAvB,EAAqCC,KAArC,GAA6CL,IAAI,CAACN,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAAJ,CAAmBV,IAAI,CAACU,IAAL,CAAU,CAAV,CAAnB,EAAiCC,KAAjC,GACpC,KADoC,GAC5B,IADjB,CAf+B,CAkB/B;AACA;AAEA;AACA;AACD,SAvBa,CAAd;AAwBD,OAzBM,CAAP,CADkB,CA4BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAvCD;AAuCG,IAAA,KAAK,EAAE;AAACW,MAAAA,MAAM,EAAE,gBAAT;AAA2BC,MAAAA,MAAM,EAAE,MAAnC;AAA2CC,MAAAA,KAAK,EAAE,MAAlD;AACGC,MAAAA,eAAe,EAAG,GAAEhB,IAAI,CAACW,KAAL,GAAa,OAAb,GAAuB,OAAQ;AADtD,KAvCV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA4CD,CA9CD;;AAgDA,eAAeZ,IAAf","sourcesContent":["import React from 'react';\nimport produce from 'immer';\n\nconst Cell = ( { cell, setGrid, setDisable, numberOfCells, setNumberOfCells, numberOfCellsRef }) => {\n\n  return (\n    <div onClick={() => {\n      setGrid(grid => {\n        return produce(grid, gridCopy => {\n\n          setNumberOfCells(num => {\n            return produce(num, numCopy => {\n              if (gridCopy[cell.coor[0]][cell.coor[1]].alive) {\n                numCopy = num + 1;\n                numberOfCellsRef.current = numCopy;\n              } else if (gridCopy[cell.coor[0]][cell.coor[1]].alive === false) {\n                numCopy = num - 1;\n                numberOfCellsRef.current = numCopy;\n              }\n\n            })\n          })\n\n          gridCopy[cell.coor[0]][cell.coor[1]].alive = grid[cell.coor[0]][cell.coor[1]].alive ? \n                   false : true\n\n          // setNumberOfCells(num => {\n          //   return produce(num, numCopy => {\n\n          //   })\n          // })\n        })\n      })\n\n      // if (cell.alive === true) {\n      //   let num = numberOfCells + 1;\n      //   setNumberOfCells(num);\n      //   numberOfCellsRef.current = num;\n      // } else {\n      //   let num = numberOfCells - 1;\n      //   setNumberOfCells(num);\n      //   numberOfCellsRef.current = num;\n      // }\n\n      setDisable(false);\n    }} style={{border: '1px solid gray', height: '15px', width: '15px', \n                 backgroundColor: `${cell.alive ? 'black' : 'white'}`}}>    \n    </div>\n  )\n}\n\nexport default Cell"]},"metadata":{},"sourceType":"module"}