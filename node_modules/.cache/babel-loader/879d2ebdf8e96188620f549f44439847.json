{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\nconst numRows = 50;\nconst numCols = 50;\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst Main = () => {\n  // const [grid, setGrid] = useState([]);\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1',\n    func: preset1\n  }, {\n    name: 'Preset 2',\n    func: preset2\n  }, {\n    name: 'Preset 3',\n    func: preset3\n  }, {\n    name: 'Random',\n    func: randomPreset\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  const [generation, setGeneration] = useState(0);\n  const generationRef = useRef(generation);\n  generationRef.current = generation;\n  useEffect(() => {\n    console.log('use effect main');\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j]\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n  }, [reload]);\n  const startSimulation = useCallback(() => {\n    if (!simulateRef.current) {\n      return;\n    }\n\n    setGeneration(num => num + 1); // setGrid(grid => {\n    //   return produce(grid, gridCopy => {\n    //     // make cells wrap around the grid\n    //     const coordinates = {};\n    //     wrapCellsAround(grid, coordinates);\n    //     for (let i = 0; i < grid.length; i++) {\n    //       for (let j = 0; j < grid[i].length; j++) {\n    //         if (grid[i][j].alive === true) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n    //         }\n    //         if (grid[i][j].alive === false) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n    //         }\n    //       }\n    //     }\n    //   });\n    // });\n    // setTimeout(() => {\n    //   startSimulation()\n    // }, 0)\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(startSimulation, 100);\n  }, []);\n\n  const pauseSimulation = () => {\n    setSimulate(false);\n  };\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Conway's Game of Life\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, \"Generation: # \", generationRef.current), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation();\n    },\n    disabled: simulate ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      setGrid: setGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 24\n      }\n    });\n  }))))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","useCallback","Preset","Grid","produce","preset1","preset2","preset3","randomPreset","countNeighbors","wrapCellsAround","numRows","numCols","operations","generateEmptyGrid","rows","i","push","Array","from","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","func","reload","setReload","simulate","setSimulate","simulateRef","current","generation","setGeneration","generationRef","console","log","arr","length","j","alive","coor","startSimulation","num","g","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","pauseSimulation","clearSimulation","width","height","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\nconst Main = () => {\n  // const [grid, setGrid] = useState([]);\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1', func: preset1}, \n                   {name: 'Preset 2', func: preset2},\n                   {name: 'Preset 3', func: preset3},\n                   {name: 'Random', func: randomPreset}]\n  const [reload, setReload] = useState(false);\n\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  const [generation, setGeneration] = useState(0);\n  const generationRef = useRef(generation);\n  generationRef.current = generation;\n\n\n  useEffect(() => {\n    console.log('use effect main')\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j]}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n  }, [reload])\n\n\n  const startSimulation = useCallback(() => {\n\n    if (!simulateRef.current) {\n      return \n    }\n\n    setGeneration((num) => num + 1)\n\n    // setGrid(grid => {\n    //   return produce(grid, gridCopy => {\n\n    //     // make cells wrap around the grid\n    //     const coordinates = {};\n    //     wrapCellsAround(grid, coordinates);\n\n\n    //     for (let i = 0; i < grid.length; i++) {\n\n    //       for (let j = 0; j < grid[i].length; j++) {\n\n    //         if (grid[i][j].alive === true) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n    //         }\n    //         if (grid[i][j].alive === false) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n\n    //         }\n    //       }\n    //     }\n    //   });\n\n    // });\n\n    // setTimeout(() => {\n    //   startSimulation()\n    // }, 0)\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(startSimulation, 100);\n\n  }, [])\n\n\n  const pauseSimulation = () => {\n    setSimulate(false)\n  }\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <header>\n        <h1>Conway's Game of Life</h1>\n      </header>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: # {generationRef.current}</h2>\n          <div className=\"grid-wrap\" style={{width: '100vw', height: '100vh'}}>\n\n            <Grid grid={grid} setGrid={setGrid} />\n\n            {/* <div className=\"presets\">\n              {presets.map((preset, i) => {\n\n                return <Preset preset={preset} key={i} \n                               setSelectedPreset={setSelectedPreset} \n                               selectedPreset={selectedPreset}\n                               setGrid={setGrid}\n                               />\n              })}\n            </div> */}\n          </div>\n          <div className=\"buttons\">\n            <button onClick={() => {\n                      setSimulate(!simulate);\n                      simulateRef.current = true;\n                      startSimulation();\n                      }}\n                    disabled={simulate ? true : false}\n            >Play\n            </button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={clearSimulation}>Clear</button>\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n\n                return <Preset preset={preset} key={i} \n                               setSelectedPreset={setSelectedPreset} \n                               selectedPreset={selectedPreset}\n                               setGrid={setGrid}\n                               />\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div> */}\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}