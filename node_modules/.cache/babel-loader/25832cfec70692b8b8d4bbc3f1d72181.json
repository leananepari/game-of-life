{"ast":null,"code":"import produce from 'immer';\nexport const preset1 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[8][6]['alive'] = true;\n      gridCopy[9][7]['alive'] = true;\n      gridCopy[10][5]['alive'] = true;\n      gridCopy[10][6]['alive'] = true;\n      gridCopy[10][7]['alive'] = true;\n      gridCopy[12][16]['alive'] = true;\n      gridCopy[13][17]['alive'] = true;\n      gridCopy[14][15]['alive'] = true;\n      gridCopy[14][16]['alive'] = true;\n      gridCopy[14][17]['alive'] = true;\n      gridCopy[16][26]['alive'] = true;\n      gridCopy[17][27]['alive'] = true;\n      gridCopy[18][25]['alive'] = true;\n      gridCopy[18][26]['alive'] = true;\n      gridCopy[18][27]['alive'] = true;\n      gridCopy[7][31]['alive'] = true;\n      gridCopy[6][29]['alive'] = true;\n      gridCopy[7][27]['alive'] = true;\n      gridCopy[8][26]['alive'] = true;\n      gridCopy[9][26]['alive'] = true;\n      gridCopy[10][26]['alive'] = true;\n      gridCopy[10][27]['alive'] = true;\n      gridCopy[10][28]['alive'] = true;\n      gridCopy[10][29]['alive'] = true;\n      gridCopy[10][30]['alive'] = true;\n      gridCopy[9][31]['alive'] = true;\n    });\n  });\n};\nexport const preset2 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[3][5]['alive'] = true;\n      gridCopy[3][6]['alive'] = true;\n      gridCopy[3][7]['alive'] = true;\n      gridCopy[8][15]['alive'] = true;\n      gridCopy[8][16]['alive'] = true;\n      gridCopy[8][17]['alive'] = true;\n      gridCopy[13][25]['alive'] = true;\n      gridCopy[13][26]['alive'] = true;\n      gridCopy[13][27]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2)][Math.floor(grid[0].length / 2)]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2)][Math.floor(grid[0].length / 2) + 1]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 1][Math.floor(grid[0].length / 2)]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 1][Math.floor(grid[0].length / 2) + 1]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 2][Math.floor(grid[0].length / 2) + 2]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 2][Math.floor(grid[0].length / 2) + 3]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 3][Math.floor(grid[0].length / 2) + 2]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) + 3][Math.floor(grid[0].length / 2) + 3]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 10][Math.floor(grid[0].length / 2)]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 10][Math.floor(grid[0].length / 2) + 1]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 9][Math.floor(grid[0].length / 2)]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 9][Math.floor(grid[0].length / 2) + 1]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 8][Math.floor(grid[0].length / 2) + 2]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 8][Math.floor(grid[0].length / 2) + 3]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 7][Math.floor(grid[0].length / 2) + 2]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 7][Math.floor(grid[0].length / 2) + 3]['alive'] = true;\n    });\n  });\n};\nexport const preset3 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[Math.floor(grid.length / 2) - 5][5]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5][6]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][5]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5][6 + 9]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 2][6 + 9]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 3][6 + 9 + 1]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 4][6 + 9 + 2]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 4][6 + 9 + 3]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 3][6 + 9 + 5]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 2][6 + 9 + 6]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 6]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5][6 + 9 + 6]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 4]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 7]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 1][6 + 10]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 11]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 12]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 1][6 + 14]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 19]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 20]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 19]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 20]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 2][6 + 19]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 2][6 + 20]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 3][6 + 21]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 3][6 + 21]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 3][6 + 23]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 4][6 + 23]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 3][6 + 23]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 4][6 + 23]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 33]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 34]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 33]['alive'] = true;\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 34]['alive'] = true;\n    });\n  });\n};\nexport const randomPreset = setGrid => {\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      for (let i = 0; i < grid.length; i++) {\n        let k = Math.floor(Math.random() * (grid.length - 1) + 0);\n        let j = Math.floor(Math.random() * (grid[0].length - 1) + 0);\n        gridCopy[k][j].alive = true;\n\n        for (let l = 0; l < grid[i].length; l++) {\n          let k = Math.floor(Math.random() * (grid.length - 1) + 0);\n          let j = Math.floor(Math.random() * (grid[0].length - 1) + 0);\n          gridCopy[k][j].alive = true;\n        }\n      }\n    });\n  });\n};\n\nconst clearGrid = setGrid => {\n  let arr = new Array(25);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(75);\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {\n        alive: false,\n        coor: [i, j],\n        age: 1\n      };\n    }\n  }\n\n  setGrid(arr);\n};\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  let count_neighbors = 0; // check the top cell\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n    if (coordinates[`${i - 1},${j}`] !== null) {\n      if (coordinates[`${i - 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i - 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check top right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n    if (coordinates[`${i - 1},${j + 1}`] !== null) {\n      if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i - 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check cell to the right\n\n\n  if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n    if (coordinates[`${i},${j + 1}`] !== null) {\n      if (coordinates[`${i},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n    if (coordinates[`${i + 1},${j + 1}`] !== null) {\n      if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i + 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n    if (coordinates[`${i + 1},${j}`] !== null) {\n      if (coordinates[`${i + 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i + 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check bottom left corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n    if (coordinates[`${i + 1},${j - 1}`] !== null) {\n      if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i + 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // check cell to the left\n\n\n  if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n    if (coordinates[`${i},${j - 1}`] !== null) {\n      if (coordinates[`${i},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check top left corner\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n    if (coordinates[`${i - 1},${j - 1}`] !== null) {\n      if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    }\n  } else {\n    if (grid[i - 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // should it stay alive or not\n\n\n  if (state === true) {\n    if (count_neighbors < 2 || count_neighbors > 3) {\n      buffer[i][j].alive = false;\n      buffer[i][j].age = 0;\n    } else {\n      buffer[i][j].age += 1;\n    }\n  } else if (state === false) {\n    if (count_neighbors === 3) {\n      buffer[i][j].alive = true;\n      buffer[i][j].age += 1;\n    }\n  }\n};\nexport const wrapCellsAround = (grid, coordinates, gliderGun) => {\n  const build_top_row = () => {\n    let index = 0; //add corner cells\n\n    if (!gliderGun) {\n      coordinates['-1,-1'] = grid[grid.length - 1][grid[0].length - 1];\n      coordinates[`-1,${grid[0].length}`] = grid[grid.length - 1][0];\n    } else {\n      coordinates['-1,-1'] = null;\n      coordinates[`-1,${grid[0].length}`] = null;\n    }\n\n    while (index < grid[0].length) {\n      if (!gliderGun) {\n        coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n      } else {\n        coordinates[`-1,${index}`] = null;\n      }\n\n      index++;\n    }\n  };\n\n  const build_bottom_row = () => {\n    let index = 0; //add corner cells\n\n    if (!gliderGun) {\n      coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n      coordinates[`${grid.length},${grid[0].length}`] = grid[0][0];\n    } else {\n      coordinates[`${grid.length},-1`] = null;\n      coordinates[`${grid.length},${grid[0].length}`] = null;\n    }\n\n    while (index < grid[0].length) {\n      if (!gliderGun) {\n        coordinates[`${grid.length},${index}`] = grid[0][index];\n      } else {\n        coordinates[`${grid.length},${index}`] = null;\n      }\n\n      index++;\n    }\n  };\n\n  const build_left_col = () => {\n    let index = 0;\n\n    while (index < grid.length) {\n      if (!gliderGun) {\n        coordinates[`${index},-1`] = grid[index][grid[0].length - 1];\n      } else {\n        coordinates[`${index},-1`] = null;\n      }\n\n      index++;\n    }\n  };\n\n  const build_right_col = () => {\n    let index = 0;\n\n    while (index < grid.length) {\n      if (!gliderGun) {\n        coordinates[`${index},${grid[0].length}`] = grid[index][0];\n      } else {\n        coordinates[`${index},${grid[0].length}`] = null;\n      }\n\n      index++;\n    }\n  };\n\n  build_top_row();\n  build_bottom_row();\n  build_left_col();\n  build_right_col();\n};","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/src/utils/helper.js"],"names":["produce","preset1","setGrid","clearGrid","grid","gridCopy","preset2","Math","floor","length","preset3","randomPreset","i","k","random","j","alive","l","arr","Array","coor","age","countNeighbors","buffer","coordinates","state","count_neighbors","hasOwnProperty","wrapCellsAround","gliderGun","build_top_row","index","build_bottom_row","build_left_col","build_right_col"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const preset1 = (setGrid) => {\n\n    clearGrid(setGrid);\n\n    setGrid(grid => {\n\n      return produce(grid, gridCopy => {\n\n        gridCopy[8][6]['alive'] = true\n        gridCopy[9][7]['alive'] = true\n        gridCopy[10][5]['alive'] = true\n        gridCopy[10][6]['alive'] = true\n        gridCopy[10][7]['alive'] = true\n\n        gridCopy[12][16]['alive'] = true\n        gridCopy[13][17]['alive'] = true\n        gridCopy[14][15]['alive'] = true\n        gridCopy[14][16]['alive'] = true\n        gridCopy[14][17]['alive'] = true\n\n        gridCopy[16][26]['alive'] = true\n        gridCopy[17][27]['alive'] = true\n        gridCopy[18][25]['alive'] = true\n        gridCopy[18][26]['alive'] = true\n        gridCopy[18][27]['alive'] = true\n\n        gridCopy[7][31]['alive'] = true\n        gridCopy[6][29]['alive'] = true\n        gridCopy[7][27]['alive'] = true\n        gridCopy[8][26]['alive'] = true\n        gridCopy[9][26]['alive'] = true\n        gridCopy[10][26]['alive'] = true\n        gridCopy[10][27]['alive'] = true\n        gridCopy[10][28]['alive'] = true\n        gridCopy[10][29]['alive'] = true\n        gridCopy[10][30]['alive'] = true\n        gridCopy[9][31]['alive'] = true\n\n      })\n    })\n\n}\n\nexport const preset2 = (setGrid) => {\n\n  clearGrid(setGrid);\n\n  setGrid(grid => {\n\n    return produce(grid, gridCopy => {\n\n      gridCopy[3][5]['alive'] = true\n      gridCopy[3][6]['alive'] = true\n      gridCopy[3][7]['alive'] = true\n    \n      gridCopy[8][15]['alive'] = true\n      gridCopy[8][16]['alive'] = true\n      gridCopy[8][17]['alive'] = true\n    \n      gridCopy[13][25]['alive'] = true\n      gridCopy[13][26]['alive'] = true\n      gridCopy[13][27]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2)][Math.floor(grid[0].length / 2)]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2)][Math.floor(grid[0].length / 2) + 1]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) + 1][Math.floor(grid[0].length / 2)]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) + 1][Math.floor(grid[0].length / 2) + 1]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) + 2][Math.floor(grid[0].length / 2) + 2]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) + 2][Math.floor(grid[0].length / 2) + 3]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) + 3][Math.floor(grid[0].length / 2) + 2]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) + 3][Math.floor(grid[0].length / 2) + 3]['alive'] = true\n\n\n      gridCopy[Math.floor(grid.length / 2) - 10][Math.floor(grid[0].length / 2)]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 10][Math.floor(grid[0].length / 2) + 1]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 9][Math.floor(grid[0].length / 2)]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 9][Math.floor(grid[0].length / 2) + 1]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 8][Math.floor(grid[0].length / 2) + 2]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 8][Math.floor(grid[0].length / 2) + 3]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 7][Math.floor(grid[0].length / 2) + 2]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 7][Math.floor(grid[0].length / 2) + 3]['alive'] = true\n\n    })\n  })\n\n}\n\nexport const preset3 = (setGrid) => {\n\n  clearGrid(setGrid);\n\n  setGrid(grid => {\n\n    return produce(grid, gridCopy => {\n\n      gridCopy[Math.floor(grid.length / 2) - 5][5]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5][6]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][5]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5][6 + 9]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5+ 2][6 + 9]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5+ 3][6 + 9 + 1]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 4][6 + 9 + 2]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 4][6 + 9 + 3]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) -5 + 3][6 + 9 + 5]['alive'] = true\n      \n      gridCopy[Math.floor(grid.length / 2) - 5 + 2][6 + 9 + 6]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 6]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5][6 + 9 + 6]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 4]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 + 1][6 + 9 + 7]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 1][6 + 10]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 11]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 12]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) -5 - 1][6 + 14]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 19]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 20]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 19]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 20]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5- 2 + 2][6 + 19]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 2][6 + 20]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 3][6 + 21]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 3][6 + 21]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 3][6 + 23]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 4][6 + 23]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 3][6 + 23]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 4][6 + 23]['alive'] = true\n\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 33]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2][6 + 34]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 33]['alive'] = true\n      gridCopy[Math.floor(grid.length / 2) - 5 - 2 + 1][6 + 34]['alive'] = true\n\n    })\n  })\n}\n\nexport const randomPreset = (setGrid) => {\n\n    setGrid(grid => {\n\n      return produce(grid, gridCopy => {\n\n        for (let i = 0; i < grid.length; i++) {\n          let k = Math.floor((Math.random() * (grid.length - 1)) + 0);\n          let j = Math.floor((Math.random() * (grid[0].length - 1)) + 0);\n          gridCopy[k][j].alive = true;\n\n          for (let l = 0; l < grid[i].length; l++) {\n            let k = Math.floor((Math.random() * (grid.length - 1)) + 0);\n            let j = Math.floor((Math.random() * (grid[0].length - 1)) + 0);\n            gridCopy[k][j].alive = true;\n          }\n        }\n\n      })\n    })\n}\n\n\nconst clearGrid = (setGrid) => {\n\n  let arr = new Array(25);\n      \n  for(let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(75)\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {alive: false, coor: [i,j], age: 1}\n    }\n  }\n  setGrid(arr)\n\n}\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      if (coordinates[`${i-1},${j}`] !== null) {\n        if (coordinates[`${i-1},${j}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`] !== null) {\n        if (coordinates[`${i-1},${j+1}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`] !== null) {\n        if (coordinates[`${i},${j+1}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`] !== null) {\n        if (coordinates[`${i+1},${j+1}`].alive === true) {\n          count_neighbors ++;\n        }\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`] !== null) {\n        if (coordinates[`${i+1},${j}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`] !== null) {\n        if (coordinates[`${i+1},${j-1}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`] !== null) {\n        if (coordinates[`${i},${j-1}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`] !== null) {\n        if (coordinates[`${i-1},${j-1}`].alive === true) {\n          count_neighbors ++;\n        }\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors < 2 || count_neighbors > 3) {\n        buffer[i][j].alive = false;\n        buffer[i][j].age = 0;\n\n      } else {\n        buffer[i][j].age += 1;\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n        buffer[i][j].age += 1;\n      } \n    }\n  }\n\n\nexport const wrapCellsAround = (grid, coordinates, gliderGun) => {\n\n  const build_top_row = () => {\n    let index = 0;\n\n    //add corner cells\n    if (!gliderGun) {\n      coordinates['-1,-1'] = grid[grid.length - 1][grid[0].length - 1];\n      coordinates[`-1,${grid[0].length}`] = grid[grid.length - 1][0];\n    } else {\n      coordinates['-1,-1'] = null;\n      coordinates[`-1,${grid[0].length}`] = null;\n    }\n\n    while(index < grid[0].length) {\n      if (!gliderGun) {\n        coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n      } else {\n        coordinates[`-1,${index}`] = null;\n      }\n      index ++;\n    }\n  }\n\n  const build_bottom_row = () => {\n    let index = 0;\n\n    //add corner cells\n    if (!gliderGun) {\n      coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n      coordinates[`${grid.length},${grid[0].length}`] = grid[0][0];\n    } else {\n      coordinates[`${grid.length},-1`] = null;\n      coordinates[`${grid.length},${grid[0].length}`] = null;\n    }\n\n    while(index < grid[0].length) {\n      if (!gliderGun) {\n        coordinates[`${grid.length},${index}`] = grid[0][index];\n      } else {\n        coordinates[`${grid.length},${index}`] = null;\n      }\n      index ++;\n    }\n\n  }\n\n  const build_left_col = () => {\n    let index = 0;\n\n    while(index < grid.length) {\n      if (!gliderGun) {\n        coordinates[`${index},-1`] = grid[index][grid[0].length - 1];\n      } else {\n        coordinates[`${index},-1`] = null;\n      }\n      index ++;\n    }\n\n  }\n\n  const build_right_col = () => {\n    let index = 0;\n\n    while(index < grid.length) {\n      if (!gliderGun) {\n        coordinates[`${index},${grid[0].length}`] = grid[index][0];\n      } else {\n        coordinates[`${index},${grid[0].length}`] = null;\n      }\n      index ++;\n    }\n  }\n  build_top_row();\n  build_bottom_row();\n  build_left_col();\n  build_right_col();\n\n}"]},"metadata":{},"sourceType":"module"}