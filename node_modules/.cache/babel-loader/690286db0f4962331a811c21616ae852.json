{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3 } from './helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1',\n    func: preset1\n  }, {\n    name: 'Preset 2',\n    func: preset2\n  }, {\n    name: 'Preset 3',\n    func: preset3\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  useEffect(() => {\n    // build the grid 25x25\n    console.log('USE EFFECT MAIN');\n\n    if (!simulateRef.current) {\n      // if (!simulate) {\n      console.log('IF NOT IN SIMULATION');\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j]\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n\n    console.log('RELOAD MAIN', reload);\n  }, [reload]);\n\n  const startSimulation = () => {\n    if (!simulateRef.current) {\n      return;\n    } // if (!simulate) {\n    //   return \n    // }\n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n    // let buffer = [];\n    // const simulateFunc = () => {\n    // // while(simulate) {\n    //   console.log('WHILE TRUE')\n    //   // let buffer = [...grid]\n    //     let buffer = new Array(25);\n    //     buffer = new Array(25);\n    //     for (let i = 0; i < buffer.length; i++) {\n    //         buffer[i] = new Array(25);\n    //     }\n    //     for (let i = 0; i < buffer.length; i++) {\n    //       for (let j = 0; j < buffer[i].length; j++) {\n    //         buffer[i][j] = {alive: false}\n    //       }\n    //     }\n    //     const coordinates = {};\n    //     const build_top_edge = () => {\n    //       let index = 0;\n    //       //add corner cells\n    //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n    //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n    //       while(index < grid.length) {\n    //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_bottom_edge = () => {\n    //       let index = 0;\n    //       //add corner cells\n    //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n    //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n    //       while(index < grid.length) {\n    //         coordinates[`${grid.length},${index}`] = grid[0][index];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_left_edge = () => {\n    //       let index = 0;\n    //       while(index < grid.length) {\n    //         // buffer[index][0] = grid[index][grid.length - 1];\n    //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_right_edge = () => {\n    //       let index = 0;\n    //       while(index < grid.length) {\n    //         // buffer[index][buffer.length - 1] = grid[index][0];\n    //         coordinates[`${index},${grid.length}`] = grid[index][0];\n    //         index ++;\n    //       }\n    //     }\n    //     build_top_edge();\n    //     build_bottom_edge();\n    //     build_left_edge();\n    //     build_right_edge();\n    // const simulate = () => {\n    // console.log('SIMULATE')\n    // setSimulate(true);\n\n    /**********************/\n\n\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        const coordinates = {};\n\n        const build_top_edge = () => {\n          let index = 0; //add corner cells\n\n          coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n          coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n          while (index < grid.length) {\n            coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n            index++;\n          }\n        };\n\n        const build_bottom_edge = () => {\n          let index = 0; //add corner cells\n\n          coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n          coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n          while (index < grid.length) {\n            coordinates[`${grid.length},${index}`] = grid[0][index];\n            index++;\n          }\n        };\n\n        const build_left_edge = () => {\n          let index = 0;\n\n          while (index < grid.length) {\n            // buffer[index][0] = grid[index][grid.length - 1];\n            coordinates[`${index},-1`] = grid[index][grid.length - 1];\n            index++;\n          }\n        };\n\n        const build_right_edge = () => {\n          let index = 0;\n\n          while (index < grid.length) {\n            // buffer[index][buffer.length - 1] = grid[index][0];\n            coordinates[`${index},${grid.length}`] = grid[index][0];\n            index++;\n          }\n        };\n\n        build_top_edge();\n        build_bottom_edge();\n        build_left_edge();\n        build_right_edge();\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true);\n            } ///////////////////////////////////////////////////////////\n\n\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false);\n            }\n          }\n        }\n      });\n    });\n    setTimeout(startSimulation, 1000);\n    /****************************************** */\n    ////////////////////////////////////////************ */\n    //       for (let i = 0; i < grid.length; i++) {\n    //         for (let j = 0; j < grid[i].length; j++) {\n    //           if (grid[i][j].alive === true) {\n    //             countNeighbors(grid, buffer, coordinates, i, j, true)\n    //           }\n    //           ///////////////////////////////////////////////////////////\n    //           if (grid[i][j].alive === false) {\n    //             countNeighbors(grid, buffer, coordinates, i, j, false)\n    //           }\n    //         }\n    //       }\n    //       // // console.log('BUFFER', buffer)\n    //       let copy = [...buffer]\n    //       setGrid(copy);\n    //       // setReload(!reload)\n    //       // setTimeout(simulateFunc, 1000)\n    //       setTimeout(() => {\n    //         if (simulateRef.current) {\n    //           // startSimulation(); \n    //           buffer = [];\n    //           simulateFunc();\n    //         }\n    //         // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n    //           // console.log('IFFFFF')\n    //           // setReload(!reload)\n    //           // console.log('RELOAD', reload)\n    //           // setGrid(copy);\n    //           // startSimulation();\n    //             // simulateFunc()\n    //           // simulate()\n    //         // }\n    //       }, 1000)\n    //   // startSimulation();\n    // }\n    // simulateFunc();\n  };\n\n  const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n    // (grid, buffer, coordinates, i, j, state) => {\n    let count_neighbors = 0; // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i - 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check top right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n      if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check cell to the right\n\n\n    if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n      if (coordinates[`${i},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n      if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n      if (coordinates[`${i + 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check bottom left corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n      if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // check cell to the left\n\n\n    if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n      if (coordinates[`${i},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check top left corner\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n      if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // should it stay alive or not\n\n\n    if (state === true) {\n      if (count_neighbors < 2 || count_neighbors > 3) {\n        buffer[i][j].alive = false;\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      }\n    }\n  };\n\n  const pauseSimulation = () => {\n    console.log('PAUSE');\n    setSimulate(false);\n  };\n\n  const stopSimulation = () => {\n    console.log('STOP');\n    setSimulate(false);\n    setReload(!reload);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }, \"Stop\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Preset","Grid","produce","preset1","preset2","preset3","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","func","reload","setReload","simulate","setSimulate","simulateRef","current","console","log","arr","Array","i","length","j","alive","coor","startSimulation","gridCopy","coordinates","build_top_edge","index","build_bottom_edge","build_left_edge","build_right_edge","countNeighbors","setTimeout","buffer","state","count_neighbors","hasOwnProperty","pauseSimulation","stopSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3 } from './helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1', func: preset1}, {name: 'Preset 2', func: preset2},\n                   {name: 'Preset 3', func: preset3}]\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  useEffect(() => {\n    // build the grid 25x25\n\n    console.log('USE EFFECT MAIN')\n\n    if (!simulateRef.current) {\n      // if (!simulate) {\n      console.log('IF NOT IN SIMULATION')\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j]}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n    console.log('RELOAD MAIN', reload)\n\n  }, [reload])\n\n  const startSimulation = () => {\n\n    if (!simulateRef.current) {\n      return \n    }\n    // if (!simulate) {\n    //   return \n    // }\n\n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n    // let buffer = [];\n\n    // const simulateFunc = () => {\n    // // while(simulate) {\n    //   console.log('WHILE TRUE')\n    //   // let buffer = [...grid]\n      \n    //     let buffer = new Array(25);\n    //     buffer = new Array(25);\n\n\n    //     for (let i = 0; i < buffer.length; i++) {\n    //         buffer[i] = new Array(25);\n    //     }\n\n    //     for (let i = 0; i < buffer.length; i++) {\n    //       for (let j = 0; j < buffer[i].length; j++) {\n    //         buffer[i][j] = {alive: false}\n    //       }\n    //     }\n    //     const coordinates = {};\n\n    //     const build_top_edge = () => {\n    //       let index = 0;\n\n    //       //add corner cells\n    //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n    //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n    //       while(index < grid.length) {\n    //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n    //         index ++;\n    //       }\n    //     }\n\n    //     const build_bottom_edge = () => {\n    //       let index = 0;\n\n    //       //add corner cells\n    //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n    //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n    //       while(index < grid.length) {\n    //         coordinates[`${grid.length},${index}`] = grid[0][index];\n    //         index ++;\n    //       }\n    \n    //     }\n\n    //     const build_left_edge = () => {\n    //       let index = 0;\n\n    //       while(index < grid.length) {\n    //         // buffer[index][0] = grid[index][grid.length - 1];\n    //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n    //         index ++;\n    //       }\n\n    //     }\n\n    //     const build_right_edge = () => {\n    //       let index = 0;\n\n    //       while(index < grid.length) {\n    //         // buffer[index][buffer.length - 1] = grid[index][0];\n    //         coordinates[`${index},${grid.length}`] = grid[index][0];\n    //         index ++;\n    //       }\n    //     }\n\n    //     build_top_edge();\n    //     build_bottom_edge();\n    //     build_left_edge();\n    //     build_right_edge();\n\n\n        // const simulate = () => {\n          // console.log('SIMULATE')\n          // setSimulate(true);\n\n\n          /**********************/\n          setGrid(grid => {\n            return produce(grid, gridCopy => {\n\n              const coordinates = {};\n\n              const build_top_edge = () => {\n                let index = 0;\n\n                //add corner cells\n                coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n                coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n                while(index < grid.length) {\n                  coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n                  index ++;\n                }\n              }\n\n              const build_bottom_edge = () => {\n                let index = 0;\n\n                //add corner cells\n                coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n                coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n                while(index < grid.length) {\n                  coordinates[`${grid.length},${index}`] = grid[0][index];\n                  index ++;\n                }\n          \n              }\n\n              const build_left_edge = () => {\n                let index = 0;\n\n                while(index < grid.length) {\n                  // buffer[index][0] = grid[index][grid.length - 1];\n                  coordinates[`${index},-1`] = grid[index][grid.length - 1];\n                  index ++;\n                }\n\n              }\n\n              const build_right_edge = () => {\n                let index = 0;\n\n                while(index < grid.length) {\n                  // buffer[index][buffer.length - 1] = grid[index][0];\n                  coordinates[`${index},${grid.length}`] = grid[index][0];\n                  index ++;\n                }\n              }\n              build_top_edge();\n              build_bottom_edge();\n              build_left_edge();\n              build_right_edge();\n\n              for (let i = 0; i < grid.length; i++) {\n\n                for (let j = 0; j < grid[i].length; j++) {\n    \n                  if (grid[i][j].alive === true) {\n                    countNeighbors(grid, gridCopy, coordinates, i, j, true)\n                  }\n                  ///////////////////////////////////////////////////////////\n    \n                  if (grid[i][j].alive === false) {\n                    countNeighbors(grid, gridCopy, coordinates, i, j, false)\n    \n                  }\n                }\n              }\n            });\n\n          });\n\n          setTimeout(startSimulation, 1000)\n          /****************************************** */\n\n\n\n\n          ////////////////////////////////////////************ */\n\n    //       for (let i = 0; i < grid.length; i++) {\n\n    //         for (let j = 0; j < grid[i].length; j++) {\n\n    //           if (grid[i][j].alive === true) {\n    //             countNeighbors(grid, buffer, coordinates, i, j, true)\n    //           }\n    //           ///////////////////////////////////////////////////////////\n\n    //           if (grid[i][j].alive === false) {\n    //             countNeighbors(grid, buffer, coordinates, i, j, false)\n\n    //           }\n    //         }\n    //       }\n\n    //       // // console.log('BUFFER', buffer)\n    //       let copy = [...buffer]\n    //       setGrid(copy);\n    //       // setReload(!reload)\n\n    //       // setTimeout(simulateFunc, 1000)\n    //       setTimeout(() => {\n\n    //         if (simulateRef.current) {\n    //           // startSimulation(); \n    //           buffer = [];\n    //           simulateFunc();\n    //         }\n\n    //         // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n    //           // console.log('IFFFFF')\n\n    //           // setReload(!reload)\n    //           // console.log('RELOAD', reload)\n\n    //           // setGrid(copy);\n    //           // startSimulation();\n        \n    //             // simulateFunc()\n              \n    //           // simulate()\n    //         // }\n    //       }, 1000)\n    //   // startSimulation();\n    // }\n    // simulateFunc();\n\n  }\n\n  const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  // (grid, buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors < 2 || count_neighbors > 3) {\n        buffer[i][j].alive = false;\n      } \n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } \n    }\n  }\n\n  const pauseSimulation = () => {\n    console.log('PAUSE')\n    setSimulate(false)\n  }\n\n  const stopSimulation = () => {\n    console.log('STOP')\n    setSimulate(false)\n    setReload(!reload)\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n\n            <Grid grid={grid} setGrid={setGrid}/>\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n                return <Preset preset={preset} key={i} setSelectedPreset={setSelectedPreset} selectedPreset={selectedPreset}/>\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={\n              () => {\n              setSimulate(!simulate);\n              simulateRef.current = true;\n              startSimulation();\n            }\n              }>Play</button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={stopSimulation}>Stop</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}