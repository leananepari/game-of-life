{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1'\n  }, {\n    name: 'Preset 2'\n  }, {\n    name: 'Preset 3'\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  useEffect(() => {\n    // build the grid 25x25\n    console.log('USE EFFECT MAIN');\n\n    if (simulate === false) {\n      console.log('IF NOT IN SIMULATION');\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false\n          };\n        }\n      }\n\n      arr[3][5]['alive'] = true;\n      arr[3][6]['alive'] = true;\n      arr[4][5]['alive'] = true;\n      arr[4][6]['alive'] = true;\n      arr[2][7]['alive'] = true;\n      arr[3][8]['alive'] = true;\n      arr[3][9]['alive'] = true;\n      arr[4][8]['alive'] = true;\n      arr[4][9]['alive'] = true;\n      arr[5][8]['alive'] = true;\n      arr[5][9]['alive'] = true;\n      arr[5][6]['alive'] = true;\n      arr[6][5]['alive'] = true;\n      arr[6][6]['alive'] = true;\n      arr[7][5]['alive'] = true;\n      arr[7][6]['alive'] = true;\n      arr[7][4]['alive'] = true;\n      arr[8][6]['alive'] = true;\n      arr[9][6]['alive'] = true;\n      arr[9][7]['alive'] = true;\n      arr[10][7]['alive'] = true;\n      arr[10][8]['alive'] = true;\n      arr[10][9]['alive'] = true;\n      arr[9][9]['alive'] = true;\n      arr[9][10]['alive'] = true;\n      arr[8][8]['alive'] = true; // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n\n      setGrid(arr);\n    }\n\n    console.log('RELOAD MAIN', reload);\n  }, [reload, simulate]);\n\n  const startSimulation = () => {\n    // if (!simulateRef.current) {\n    //   return \n    // }\n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n    // const simulateFunc = () => {\n    // // while(simulate) {\n    //   console.log('WHILE TRUE')\n    //     let buffer = new Array(25);\n    //     for (let i = 0; i < buffer.length; i++) {\n    //         buffer[i] = new Array(25);\n    //     }\n    //     for (let i = 0; i < buffer.length; i++) {\n    //       for (let j = 0; j < buffer[i].length; j++) {\n    //         buffer[i][j] = {alive: false}\n    //       }\n    //     }\n    //     const coordinates = {};\n    //     const build_top_edge = () => {\n    //       let index = 0;\n    //       //add corner cells\n    //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n    //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n    //       while(index < grid.length) {\n    //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_bottom_edge = () => {\n    //       let index = 0;\n    //       //add corner cells\n    //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n    //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n    //       while(index < grid.length) {\n    //         coordinates[`${grid.length},${index}`] = grid[0][index];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_left_edge = () => {\n    //       let index = 0;\n    //       while(index < grid.length) {\n    //         // buffer[index][0] = grid[index][grid.length - 1];\n    //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n    //         index ++;\n    //       }\n    //     }\n    //     const build_right_edge = () => {\n    //       let index = 0;\n    //       while(index < grid.length) {\n    //         // buffer[index][buffer.length - 1] = grid[index][0];\n    //         coordinates[`${index},${grid.length}`] = grid[index][0];\n    //         index ++;\n    //       }\n    //     }\n    //     build_top_edge();\n    //     build_bottom_edge();\n    //     build_left_edge();\n    //     build_right_edge();\n    // const simulate = () => {\n    // console.log('SIMULATE')\n    // setSimulate(true);\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        const coordinates = {};\n\n        const build_top_edge = () => {\n          let index = 0; //add corner cells\n\n          coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n          coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n          while (index < grid.length) {\n            coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n            index++;\n          }\n        };\n\n        const build_bottom_edge = () => {\n          let index = 0; //add corner cells\n\n          coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n          coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n          while (index < grid.length) {\n            coordinates[`${grid.length},${index}`] = grid[0][index];\n            index++;\n          }\n        };\n\n        const build_left_edge = () => {\n          let index = 0;\n\n          while (index < grid.length) {\n            // buffer[index][0] = grid[index][grid.length - 1];\n            coordinates[`${index},-1`] = grid[index][grid.length - 1];\n            index++;\n          }\n        };\n\n        const build_right_edge = () => {\n          let index = 0;\n\n          while (index < grid.length) {\n            // buffer[index][buffer.length - 1] = grid[index][0];\n            coordinates[`${index},${grid.length}`] = grid[index][0];\n            index++;\n          }\n        };\n\n        build_top_edge();\n        build_bottom_edge();\n        build_left_edge();\n        build_right_edge();\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j].alive === true) {\n              countNeighbors(gridCopy, coordinates, i, j, true);\n            } ///////////////////////////////////////////////////////////\n\n\n            if (grid[i][j].alive === false) {\n              countNeighbors(gridCopy, coordinates, i, j, false);\n            }\n          }\n        }\n      });\n    }); // setGrid(newGrid)\n\n    setTimeout(startSimulation, 1000); ////////////////////////////////////////************ */\n    // for (let i = 0; i < grid.length; i++) {\n    //   for (let j = 0; j < grid[i].length; j++) {\n    //     if (grid[i][j].alive === true) {\n    //       countNeighbors(buffer, coordinates, i, j, true)\n    //     }\n    //     ///////////////////////////////////////////////////////////\n    //     if (grid[i][j].alive === false) {\n    //       countNeighbors(buffer, coordinates, i, j, false)\n    //     }\n    //   }\n    // }\n    // // console.log('BUFFER', buffer)\n    // let copy = [...buffer]\n    // setGrid(copy);\n    // setReload(!reload)\n    //       // setTimeout(() => {\n    //         // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n    //           // console.log('IFFFFF')\n    //           // setReload(!reload)\n    //           // console.log('RELOAD', reload)\n    //           // setGrid(copy);\n    //           // startSimulation();\n    //           if (simulate) {\n    //             simulateFunc()\n    //           }\n    //           // simulate()\n    //         // }\n    //       }, 1000)\n    //   // startSimulation();\n    // }\n    // simulateFunc();\n  };\n\n  const countNeighbors = (buffer, coordinates, i, j, state) => {\n    let count_neighbors = 0; // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i - 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check top right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n      if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check cell to the right\n\n\n    if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n      if (coordinates[`${i},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n      if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n      if (coordinates[`${i + 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check bottom left corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n      if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // check cell to the left\n\n\n    if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n      if (coordinates[`${i},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check top left corner\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n      if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // should it stay alive or not\n\n\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    }\n  };\n\n  const pauseSimulation = () => {};\n\n  const stopSimulation = () => {\n    console.log('STOP');\n    setSimulate(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    reload: reload,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(true);\n      startSimulation();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }\n  }, \"Stop\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Row","Preset","Grid","produce","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","reload","setReload","simulate","setSimulate","simulateRef","current","console","log","arr","Array","i","length","j","alive","startSimulation","gridCopy","coordinates","build_top_edge","index","build_bottom_edge","build_left_edge","build_right_edge","countNeighbors","setTimeout","buffer","state","count_neighbors","hasOwnProperty","pauseSimulation","stopSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1'}, {name: 'Preset 2'},\n                   {name: 'Preset 3'}]\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  useEffect(() => {\n    // build the grid 25x25\n\n    console.log('USE EFFECT MAIN')\n\n    if (simulate === false) {\n      console.log('IF NOT IN SIMULATION')\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false}\n        }\n      }\n\n      arr[3][5]['alive'] = true\n      arr[3][6]['alive'] = true\n      arr[4][5]['alive'] = true\n      arr[4][6]['alive'] = true\n\n      arr[2][7]['alive'] = true\n      arr[3][8]['alive'] = true\n      arr[3][9]['alive'] = true\n\n      arr[4][8]['alive'] = true\n      arr[4][9]['alive'] = true\n      arr[5][8]['alive'] = true\n      arr[5][9]['alive'] = true\n\n      arr[5][6]['alive'] = true\n      arr[6][5]['alive'] = true\n      arr[6][6]['alive'] = true\n\n      arr[7][5]['alive'] = true\n      arr[7][6]['alive'] = true\n      arr[7][4]['alive'] = true\n\n      arr[8][6]['alive'] = true\n      arr[9][6]['alive'] = true\n      arr[9][7]['alive'] = true\n      arr[10][7]['alive'] = true\n      arr[10][8]['alive'] = true\n      arr[10][9]['alive'] = true\n      arr[9][9]['alive'] = true\n\n      arr[9][10]['alive'] = true\n      arr[8][8]['alive'] = true\n      // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n\n\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n      setGrid(arr)\n    } \n\n    console.log('RELOAD MAIN', reload)\n\n  }, [reload, simulate])\n\n  const startSimulation = () => {\n    // if (!simulateRef.current) {\n    //   return \n    // }\n\n    \n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n\n    // const simulateFunc = () => {\n    // // while(simulate) {\n    //   console.log('WHILE TRUE')\n    //     let buffer = new Array(25);\n\n    //     for (let i = 0; i < buffer.length; i++) {\n    //         buffer[i] = new Array(25);\n    //     }\n\n    //     for (let i = 0; i < buffer.length; i++) {\n    //       for (let j = 0; j < buffer[i].length; j++) {\n    //         buffer[i][j] = {alive: false}\n    //       }\n    //     }\n    //     const coordinates = {};\n\n    //     const build_top_edge = () => {\n    //       let index = 0;\n\n    //       //add corner cells\n    //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n    //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n    //       while(index < grid.length) {\n    //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n    //         index ++;\n    //       }\n    //     }\n\n    //     const build_bottom_edge = () => {\n    //       let index = 0;\n\n    //       //add corner cells\n    //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n    //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n    //       while(index < grid.length) {\n    //         coordinates[`${grid.length},${index}`] = grid[0][index];\n    //         index ++;\n    //       }\n    \n    //     }\n\n    //     const build_left_edge = () => {\n    //       let index = 0;\n\n    //       while(index < grid.length) {\n    //         // buffer[index][0] = grid[index][grid.length - 1];\n    //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n    //         index ++;\n    //       }\n\n    //     }\n\n    //     const build_right_edge = () => {\n    //       let index = 0;\n\n    //       while(index < grid.length) {\n    //         // buffer[index][buffer.length - 1] = grid[index][0];\n    //         coordinates[`${index},${grid.length}`] = grid[index][0];\n    //         index ++;\n    //       }\n    //     }\n\n    //     build_top_edge();\n    //     build_bottom_edge();\n    //     build_left_edge();\n    //     build_right_edge();\n\n\n        // const simulate = () => {\n          // console.log('SIMULATE')\n          // setSimulate(true);\n          setGrid(grid => {\n            return produce(grid, gridCopy => {\n\n              const coordinates = {};\n\n              const build_top_edge = () => {\n                let index = 0;\n\n                //add corner cells\n                coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n                coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n                while(index < grid.length) {\n                  coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n                  index ++;\n                }\n              }\n\n              const build_bottom_edge = () => {\n                let index = 0;\n\n                //add corner cells\n                coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n                coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n                while(index < grid.length) {\n                  coordinates[`${grid.length},${index}`] = grid[0][index];\n                  index ++;\n                }\n          \n              }\n\n              const build_left_edge = () => {\n                let index = 0;\n\n                while(index < grid.length) {\n                  // buffer[index][0] = grid[index][grid.length - 1];\n                  coordinates[`${index},-1`] = grid[index][grid.length - 1];\n                  index ++;\n                }\n\n              }\n\n              const build_right_edge = () => {\n                let index = 0;\n\n                while(index < grid.length) {\n                  // buffer[index][buffer.length - 1] = grid[index][0];\n                  coordinates[`${index},${grid.length}`] = grid[index][0];\n                  index ++;\n                }\n              }\n              build_top_edge();\n              build_bottom_edge();\n              build_left_edge();\n              build_right_edge();\n\n              for (let i = 0; i < grid.length; i++) {\n\n                for (let j = 0; j < grid[i].length; j++) {\n    \n                  if (grid[i][j].alive === true) {\n                    countNeighbors(gridCopy, coordinates, i, j, true)\n                  }\n                  ///////////////////////////////////////////////////////////\n    \n                  if (grid[i][j].alive === false) {\n                    countNeighbors(gridCopy, coordinates, i, j, false)\n    \n                  }\n                }\n              }\n            });\n\n          });\n\n          // setGrid(newGrid)\n          setTimeout(startSimulation, 1000)\n\n          ////////////////////////////////////////************ */\n\n          // for (let i = 0; i < grid.length; i++) {\n\n          //   for (let j = 0; j < grid[i].length; j++) {\n\n          //     if (grid[i][j].alive === true) {\n          //       countNeighbors(buffer, coordinates, i, j, true)\n          //     }\n          //     ///////////////////////////////////////////////////////////\n\n          //     if (grid[i][j].alive === false) {\n          //       countNeighbors(buffer, coordinates, i, j, false)\n\n          //     }\n          //   }\n          // }\n\n          // // console.log('BUFFER', buffer)\n          // let copy = [...buffer]\n          // setGrid(copy);\n          // setReload(!reload)\n\n    //       // setTimeout(() => {\n\n    //         // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n    //           // console.log('IFFFFF')\n\n    //           // setReload(!reload)\n    //           // console.log('RELOAD', reload)\n\n    //           // setGrid(copy);\n    //           // startSimulation();\n    //           if (simulate) {\n    //             simulateFunc()\n    //           }\n    //           // simulate()\n    //         // }\n    //       }, 1000)\n    //   // startSimulation();\n    // }\n    // simulateFunc();\n\n  }\n\n  const countNeighbors = (buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    }\n  }\n\n  const pauseSimulation = () => {\n\n  }\n\n  const stopSimulation = () => {\n    console.log('STOP')\n    setSimulate(false)\n  }\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n            {/* <div className=\"grid\">\n              <div style={{}}>\n                {grid.map((row, i)=> {\n                  return <Row row={row} key={i}/>\n                })}\n              </div>\n            </div> */}\n            <Grid grid={grid} reload={reload} setGrid={setGrid}/>\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n                return <Preset preset={preset} key={i} setSelectedPreset={setSelectedPreset} selectedPreset={selectedPreset}/>\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={\n              () => {\n              setSimulate(true)\n              startSimulation()}\n              }>Play</button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={stopSimulation}>Stop</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}