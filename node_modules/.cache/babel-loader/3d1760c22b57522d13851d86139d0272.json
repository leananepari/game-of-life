{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1'\n  }, {\n    name: 'Preset 2'\n  }, {\n    name: 'Preset 3'\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  useEffect(() => {\n    // build the grid 25x25\n    console.log('USE EFFECT MAIN');\n\n    if (!simulateRef.current) {\n      console.log('IF NOT IN SIMULATION');\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false\n          };\n        }\n      }\n\n      arr[3][5]['alive'] = true;\n      arr[3][6]['alive'] = true;\n      arr[4][5]['alive'] = true;\n      arr[4][6]['alive'] = true;\n      arr[2][7]['alive'] = true;\n      arr[3][8]['alive'] = true;\n      arr[3][9]['alive'] = true;\n      arr[4][8]['alive'] = true;\n      arr[4][9]['alive'] = true;\n      arr[5][8]['alive'] = true;\n      arr[5][9]['alive'] = true;\n      arr[5][6]['alive'] = true;\n      arr[6][5]['alive'] = true;\n      arr[6][6]['alive'] = true;\n      arr[7][5]['alive'] = true;\n      arr[7][6]['alive'] = true;\n      arr[7][4]['alive'] = true;\n      arr[8][6]['alive'] = true;\n      arr[9][6]['alive'] = true;\n      arr[9][7]['alive'] = true;\n      arr[10][7]['alive'] = true;\n      arr[10][8]['alive'] = true;\n      arr[10][9]['alive'] = true;\n      arr[9][9]['alive'] = true;\n      arr[9][10]['alive'] = true;\n      arr[8][8]['alive'] = true; // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n\n      setGrid(arr);\n    }\n\n    console.log('RELOAD MAIN', reload);\n  }, [simulate, reload]);\n\n  const startSimulation = () => {\n    // if (!simulateRef.current) {\n    //   return \n    // }\n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n    const simulateFunc = () => {\n      // while(simulate) {\n      console.log('WHILE TRUE');\n      let buffer = [...grid]; // let buffer = new Array(25);\n      // for (let i = 0; i < buffer.length; i++) {\n      //     buffer[i] = new Array(25);\n      // }\n      // for (let i = 0; i < buffer.length; i++) {\n      //   for (let j = 0; j < buffer[i].length; j++) {\n      //     buffer[i][j] = {alive: false}\n      //   }\n      // }\n\n      const coordinates = {};\n\n      const build_top_edge = () => {\n        let index = 0; //add corner cells\n\n        coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n        coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n        while (index < grid.length) {\n          coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n          index++;\n        }\n      };\n\n      const build_bottom_edge = () => {\n        let index = 0; //add corner cells\n\n        coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n        coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n        while (index < grid.length) {\n          coordinates[`${grid.length},${index}`] = grid[0][index];\n          index++;\n        }\n      };\n\n      const build_left_edge = () => {\n        let index = 0;\n\n        while (index < grid.length) {\n          // buffer[index][0] = grid[index][grid.length - 1];\n          coordinates[`${index},-1`] = grid[index][grid.length - 1];\n          index++;\n        }\n      };\n\n      const build_right_edge = () => {\n        let index = 0;\n\n        while (index < grid.length) {\n          // buffer[index][buffer.length - 1] = grid[index][0];\n          coordinates[`${index},${grid.length}`] = grid[index][0];\n          index++;\n        }\n      };\n\n      build_top_edge();\n      build_bottom_edge();\n      build_left_edge();\n      build_right_edge(); // const simulate = () => {\n      // console.log('SIMULATE')\n      // setSimulate(true);\n\n      /**********************/\n      // setGrid(grid => {\n      //   return produce(grid, gridCopy => {\n      //     const coordinates = {};\n      //     const build_top_edge = () => {\n      //       let index = 0;\n      //       //add corner cells\n      //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n      //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n      //       while(index < grid.length) {\n      //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n      //         index ++;\n      //       }\n      //     }\n      //     const build_bottom_edge = () => {\n      //       let index = 0;\n      //       //add corner cells\n      //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n      //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n      //       while(index < grid.length) {\n      //         coordinates[`${grid.length},${index}`] = grid[0][index];\n      //         index ++;\n      //       }\n      //     }\n      //     const build_left_edge = () => {\n      //       let index = 0;\n      //       while(index < grid.length) {\n      //         // buffer[index][0] = grid[index][grid.length - 1];\n      //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n      //         index ++;\n      //       }\n      //     }\n      //     const build_right_edge = () => {\n      //       let index = 0;\n      //       while(index < grid.length) {\n      //         // buffer[index][buffer.length - 1] = grid[index][0];\n      //         coordinates[`${index},${grid.length}`] = grid[index][0];\n      //         index ++;\n      //       }\n      //     }\n      //     build_top_edge();\n      //     build_bottom_edge();\n      //     build_left_edge();\n      //     build_right_edge();\n      //     for (let i = 0; i < grid.length; i++) {\n      //       for (let j = 0; j < grid[i].length; j++) {\n      //         if (grid[i][j].alive === true) {\n      //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n      //         }\n      //         ///////////////////////////////////////////////////////////\n      //         if (grid[i][j].alive === false) {\n      //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n      //         }\n      //       }\n      //     }\n      //   });\n      // });\n      // setTimeout(startSimulation, 1000)\n\n      /****************************************** */\n      ////////////////////////////////////////************ */\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].alive === true) {\n            countNeighbors(grid, buffer, coordinates, i, j, true);\n          } ///////////////////////////////////////////////////////////\n\n\n          if (grid[i][j].alive === false) {\n            countNeighbors(grid, buffer, coordinates, i, j, false);\n          }\n        }\n      } // // console.log('BUFFER', buffer)\n\n\n      let copy = [...buffer];\n      setGrid(copy); // setReload(!reload)\n      // setTimeout(simulateFunc, 1000)\n\n      setTimeout(() => {\n        if (simulateRef.current) {\n          startSimulation();\n        } // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n        // console.log('IFFFFF')\n        // setReload(!reload)\n        // console.log('RELOAD', reload)\n        // setGrid(copy);\n        // startSimulation();\n        // simulateFunc()\n        // simulate()\n        // }\n\n      }, 1000); // startSimulation();\n    };\n\n    simulateFunc();\n  };\n\n  const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n    // (grid, buffer, coordinates, i, j, state) => {\n    let count_neighbors = 0; // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i - 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check top right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n      if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check cell to the right\n\n\n    if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n      if (coordinates[`${i},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n      if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n      if (coordinates[`${i + 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check bottom left corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n      if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // check cell to the left\n\n\n    if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n      if (coordinates[`${i},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check top left corner\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n      if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // should it stay alive or not\n\n\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      }\n    }\n  };\n\n  const pauseSimulation = () => {};\n\n  const stopSimulation = () => {\n    console.log('STOP');\n    setSimulate(false);\n  };\n\n  const startButton = () => {\n    setSimulate(true);\n    startSimulation();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    reload: reload,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startButton // (e) => {\n    //   console.log('click')\n    // e.preventDefault();\n    // setSimulate(true)\n    // startSimulation()\n    // }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }\n  }, \"Stop\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Row","Preset","Grid","produce","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","reload","setReload","simulate","setSimulate","simulateRef","current","console","log","arr","Array","i","length","j","alive","startSimulation","simulateFunc","buffer","coordinates","build_top_edge","index","build_bottom_edge","build_left_edge","build_right_edge","countNeighbors","copy","setTimeout","state","count_neighbors","hasOwnProperty","pauseSimulation","stopSimulation","startButton","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1'}, {name: 'Preset 2'},\n                   {name: 'Preset 3'}]\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  useEffect(() => {\n    // build the grid 25x25\n\n    console.log('USE EFFECT MAIN')\n\n    if (!simulateRef.current) {\n      console.log('IF NOT IN SIMULATION')\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false}\n        }\n      }\n\n      arr[3][5]['alive'] = true\n      arr[3][6]['alive'] = true\n      arr[4][5]['alive'] = true\n      arr[4][6]['alive'] = true\n\n      arr[2][7]['alive'] = true\n      arr[3][8]['alive'] = true\n      arr[3][9]['alive'] = true\n\n      arr[4][8]['alive'] = true\n      arr[4][9]['alive'] = true\n      arr[5][8]['alive'] = true\n      arr[5][9]['alive'] = true\n\n      arr[5][6]['alive'] = true\n      arr[6][5]['alive'] = true\n      arr[6][6]['alive'] = true\n\n      arr[7][5]['alive'] = true\n      arr[7][6]['alive'] = true\n      arr[7][4]['alive'] = true\n\n      arr[8][6]['alive'] = true\n      arr[9][6]['alive'] = true\n      arr[9][7]['alive'] = true\n      arr[10][7]['alive'] = true\n      arr[10][8]['alive'] = true\n      arr[10][9]['alive'] = true\n      arr[9][9]['alive'] = true\n\n      arr[9][10]['alive'] = true\n      arr[8][8]['alive'] = true\n      // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n\n\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n      setGrid(arr)\n    } \n\n    console.log('RELOAD MAIN', reload)\n\n  }, [simulate, reload])\n\n  const startSimulation = () => {\n\n    // if (!simulateRef.current) {\n    //   return \n    // }\n\n\n    // console.log('START')\n    // // console.log('GRID', grid)\n    // // setSimulate(true);\n\n    const simulateFunc = () => {\n    // while(simulate) {\n      console.log('WHILE TRUE')\n      let buffer = [...grid]\n        // let buffer = new Array(25);\n\n        // for (let i = 0; i < buffer.length; i++) {\n        //     buffer[i] = new Array(25);\n        // }\n\n        // for (let i = 0; i < buffer.length; i++) {\n        //   for (let j = 0; j < buffer[i].length; j++) {\n        //     buffer[i][j] = {alive: false}\n        //   }\n        // }\n        const coordinates = {};\n\n        const build_top_edge = () => {\n          let index = 0;\n\n          //add corner cells\n          coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n          coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n          while(index < grid.length) {\n            coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n            index ++;\n          }\n        }\n\n        const build_bottom_edge = () => {\n          let index = 0;\n\n          //add corner cells\n          coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n          coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n          while(index < grid.length) {\n            coordinates[`${grid.length},${index}`] = grid[0][index];\n            index ++;\n          }\n    \n        }\n\n        const build_left_edge = () => {\n          let index = 0;\n\n          while(index < grid.length) {\n            // buffer[index][0] = grid[index][grid.length - 1];\n            coordinates[`${index},-1`] = grid[index][grid.length - 1];\n            index ++;\n          }\n\n        }\n\n        const build_right_edge = () => {\n          let index = 0;\n\n          while(index < grid.length) {\n            // buffer[index][buffer.length - 1] = grid[index][0];\n            coordinates[`${index},${grid.length}`] = grid[index][0];\n            index ++;\n          }\n        }\n\n        build_top_edge();\n        build_bottom_edge();\n        build_left_edge();\n        build_right_edge();\n\n\n        // const simulate = () => {\n          // console.log('SIMULATE')\n          // setSimulate(true);\n\n\n          /**********************/\n          // setGrid(grid => {\n          //   return produce(grid, gridCopy => {\n\n          //     const coordinates = {};\n\n          //     const build_top_edge = () => {\n          //       let index = 0;\n\n          //       //add corner cells\n          //       coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n          //       coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n          //       while(index < grid.length) {\n          //         coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n          //         index ++;\n          //       }\n          //     }\n\n          //     const build_bottom_edge = () => {\n          //       let index = 0;\n\n          //       //add corner cells\n          //       coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n          //       coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n          //       while(index < grid.length) {\n          //         coordinates[`${grid.length},${index}`] = grid[0][index];\n          //         index ++;\n          //       }\n          \n          //     }\n\n          //     const build_left_edge = () => {\n          //       let index = 0;\n\n          //       while(index < grid.length) {\n          //         // buffer[index][0] = grid[index][grid.length - 1];\n          //         coordinates[`${index},-1`] = grid[index][grid.length - 1];\n          //         index ++;\n          //       }\n\n          //     }\n\n          //     const build_right_edge = () => {\n          //       let index = 0;\n\n          //       while(index < grid.length) {\n          //         // buffer[index][buffer.length - 1] = grid[index][0];\n          //         coordinates[`${index},${grid.length}`] = grid[index][0];\n          //         index ++;\n          //       }\n          //     }\n          //     build_top_edge();\n          //     build_bottom_edge();\n          //     build_left_edge();\n          //     build_right_edge();\n\n          //     for (let i = 0; i < grid.length; i++) {\n\n          //       for (let j = 0; j < grid[i].length; j++) {\n    \n          //         if (grid[i][j].alive === true) {\n          //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n          //         }\n          //         ///////////////////////////////////////////////////////////\n    \n          //         if (grid[i][j].alive === false) {\n          //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n    \n          //         }\n          //       }\n          //     }\n          //   });\n\n          // });\n\n          // setTimeout(startSimulation, 1000)\n          /****************************************** */\n\n\n\n\n          ////////////////////////////////////////************ */\n\n          for (let i = 0; i < grid.length; i++) {\n\n            for (let j = 0; j < grid[i].length; j++) {\n\n              if (grid[i][j].alive === true) {\n                countNeighbors(grid, buffer, coordinates, i, j, true)\n              }\n              ///////////////////////////////////////////////////////////\n\n              if (grid[i][j].alive === false) {\n                countNeighbors(grid, buffer, coordinates, i, j, false)\n\n              }\n            }\n          }\n\n          // // console.log('BUFFER', buffer)\n          let copy = [...buffer]\n          setGrid(copy);\n          // setReload(!reload)\n\n          // setTimeout(simulateFunc, 1000)\n          setTimeout(() => {\n\n            if (simulateRef.current) {\n              startSimulation(); \n            }\n\n            // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n              // console.log('IFFFFF')\n\n              // setReload(!reload)\n              // console.log('RELOAD', reload)\n\n              // setGrid(copy);\n              // startSimulation();\n        \n                // simulateFunc()\n              \n              // simulate()\n            // }\n          }, 1000)\n      // startSimulation();\n    }\n    simulateFunc();\n\n  }\n\n  const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  // (grid, buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      } \n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } \n    }\n  }\n\n  const pauseSimulation = () => {\n\n  }\n\n  const stopSimulation = () => {\n    console.log('STOP')\n    setSimulate(false)\n  }\n\n  const startButton = () => {\n    setSimulate(true)\n    startSimulation()\n  }\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n            {/* <div className=\"grid\">\n              <div style={{}}>\n                {grid.map((row, i)=> {\n                  return <Row row={row} key={i}/>\n                })}\n              </div>\n            </div> */}\n            <Grid grid={grid} reload={reload} setGrid={setGrid}/>\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n                return <Preset preset={preset} key={i} setSelectedPreset={setSelectedPreset} selectedPreset={selectedPreset}/>\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={startButton\n              // (e) => {\n              //   console.log('click')\n              // e.preventDefault();\n              // setSimulate(true)\n              // startSimulation()\n            // }\n              }>Play</button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={stopSimulation}>Stop</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}