{"ast":null,"code":"import produce from 'immer';\nexport const preset1 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[3][5]['alive'] = true;\n      gridCopy[3][6]['alive'] = true;\n      gridCopy[3][7]['alive'] = true;\n    });\n  });\n};\nexport const preset2 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[3][5]['alive'] = true;\n      gridCopy[3][6]['alive'] = true;\n      gridCopy[4][6]['alive'] = true;\n      gridCopy[4][5]['alive'] = true;\n      gridCopy[2][7]['alive'] = true;\n      gridCopy[3][8]['alive'] = true;\n      gridCopy[3][9]['alive'] = true;\n      gridCopy[4][8]['alive'] = true;\n      gridCopy[4][9]['alive'] = true;\n      gridCopy[5][8]['alive'] = true;\n      gridCopy[5][9]['alive'] = true;\n      gridCopy[5][6]['alive'] = true;\n      gridCopy[6][5]['alive'] = true;\n      gridCopy[6][6]['alive'] = true;\n      gridCopy[7][5]['alive'] = true;\n      gridCopy[7][6]['alive'] = true;\n      gridCopy[7][4]['alive'] = true;\n      gridCopy[8][6]['alive'] = true;\n      gridCopy[9][6]['alive'] = true;\n      gridCopy[9][7]['alive'] = true;\n      gridCopy[10][7]['alive'] = true;\n      gridCopy[10][8]['alive'] = true;\n      gridCopy[10][9]['alive'] = true;\n      gridCopy[9][9]['alive'] = true;\n      gridCopy[9][10]['alive'] = true;\n      gridCopy[8][8]['alive'] = true;\n    });\n  });\n};\nexport const preset3 = grid => {};\n\nconst clearGrid = setGrid => {\n  let arr = new Array(25);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(25);\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {\n        alive: false,\n        coor: [i, j]\n      };\n    }\n  }\n\n  setGrid(arr);\n};\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  // (grid, buffer, coordinates, i, j, state) => {\n  let count_neighbors = 0; // console.log('coordinates', coordinates)\n  // console.log('index', i, j)\n  // console.log('buffer', buffer)\n  // check the top cell\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n    // console.log('TRUEEEEEEE')\n    if (coordinates[`${i - 1},${j}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check top right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n    if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check cell to the right\n\n\n  if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n    if (coordinates[`${i},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n    if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n    if (coordinates[`${i + 1},${j}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check bottom left corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n    if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // check cell to the left\n\n\n  if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n    if (coordinates[`${i},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check top left corner\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n    if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // should it stay alive or not\n\n\n  if (state === true) {\n    if (count_neighbors < 2 || count_neighbors > 3) {\n      buffer[i][j].alive = false;\n    }\n  } else if (state === false) {\n    if (count_neighbors === 3) {\n      buffer[i][j].alive = true;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/helper.js"],"names":["produce","preset1","setGrid","clearGrid","grid","gridCopy","preset2","preset3","arr","Array","i","length","j","alive","coor","countNeighbors","buffer","coordinates","state","count_neighbors","hasOwnProperty"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const preset1 = (setGrid) => {\n\n    clearGrid(setGrid);\n\n    setGrid(grid => {\n\n      return produce(grid, gridCopy => {\n\n        gridCopy[3][5]['alive'] = true\n        gridCopy[3][6]['alive'] = true\n        gridCopy[3][7]['alive'] = true\n      })\n    })\n\n}\n\nexport const preset2 = (setGrid) => {\n\n  clearGrid(setGrid);\n\n  setGrid(grid => {\n\n    return produce(grid, gridCopy => {\n\n      gridCopy[3][5]['alive'] = true\n      gridCopy[3][6]['alive'] = true\n      gridCopy[4][6]['alive'] = true\n      gridCopy[4][5]['alive'] = true\n    \n      gridCopy[2][7]['alive'] = true\n      gridCopy[3][8]['alive'] = true\n      gridCopy[3][9]['alive'] = true\n    \n      gridCopy[4][8]['alive'] = true\n      gridCopy[4][9]['alive'] = true\n      gridCopy[5][8]['alive'] = true\n      gridCopy[5][9]['alive'] = true\n    \n      gridCopy[5][6]['alive'] = true\n      gridCopy[6][5]['alive'] = true\n      gridCopy[6][6]['alive'] = true\n    \n      gridCopy[7][5]['alive'] = true\n      gridCopy[7][6]['alive'] = true\n      gridCopy[7][4]['alive'] = true\n    \n      gridCopy[8][6]['alive'] = true\n      gridCopy[9][6]['alive'] = true\n      gridCopy[9][7]['alive'] = true\n      gridCopy[10][7]['alive'] = true\n      gridCopy[10][8]['alive'] = true\n      gridCopy[10][9]['alive'] = true\n      gridCopy[9][9]['alive'] = true\n    \n      gridCopy[9][10]['alive'] = true\n      gridCopy[8][8]['alive'] = true\n\n    })\n  })\n\n}\n\nexport const preset3 = (grid) => {\n\n}\n\n\nconst clearGrid = (setGrid) => {\n\n  let arr = new Array(25);\n      \n  for(let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(25)\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {alive: false, coor: [i,j]}\n    }\n  }\n  setGrid(arr)\n\n}\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  // (grid, buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors < 2 || count_neighbors > 3) {\n        buffer[i][j].alive = false;\n      } \n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } \n    }\n  }"]},"metadata":{},"sourceType":"module"}