{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1',\n    func: preset1\n  }, {\n    name: 'Preset 2',\n    func: preset2\n  }, {\n    name: 'Preset 3',\n    func: preset3\n  }, {\n    name: 'Random',\n    func: randomPreset\n  }];\n  const [reload, setReload] = useState(false);\n  const [disable, setDisable] = useState(true);\n  const [numberOfCells, setNumberOfCells] = useState(0);\n  const numberOfCellsRef = useRef(numberOfCells);\n  numberOfCellsRef.current = numberOfCells;\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  useEffect(() => {\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j]\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n  }, [reload]);\n\n  const startSimulation = () => {\n    if (!simulateRef.current) {\n      return;\n    }\n\n    console.log('START', numberOfCells, numberOfCellsRef, numberOfCells > 0); //check if the grid is not empty\n    // if (numberOfCellsRef.current > 0) {\n\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        // make cells wrap around the grid\n        const coordinates = {};\n        wrapCellsAround(grid, coordinates);\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true, numberOfCells, setNumberOfCells, numberOfCellsRef);\n            }\n\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false, numberOfCells, setNumberOfCells, numberOfCellsRef);\n            }\n          }\n        }\n      });\n    });\n    setTimeout(startSimulation, 1000); // }\n  };\n\n  const pauseSimulation = () => {\n    setSimulate(false);\n  };\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setNumberOfCells(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    setDisable: setDisable,\n    numberOfCells: numberOfCells,\n    setNumberOfCells: setNumberOfCells,\n    numberOfCellsRef: numberOfCellsRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      setGrid: setGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation();\n    },\n    disabled: simulate || disable || numberOfCells === 0 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Clear\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Preset","Grid","produce","preset1","preset2","preset3","randomPreset","countNeighbors","wrapCellsAround","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","func","reload","setReload","disable","setDisable","numberOfCells","setNumberOfCells","numberOfCellsRef","current","simulate","setSimulate","simulateRef","arr","Array","i","length","j","alive","coor","startSimulation","console","log","gridCopy","coordinates","setTimeout","pauseSimulation","clearSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1', func: preset1}, \n                   {name: 'Preset 2', func: preset2},\n                   {name: 'Preset 3', func: preset3},\n                   {name: 'Random', func: randomPreset}]\n  const [reload, setReload] = useState(false);\n  const [disable, setDisable] = useState(true);\n\n  const [numberOfCells, setNumberOfCells] = useState(0);\n  const numberOfCellsRef = useRef(numberOfCells);\n  numberOfCellsRef.current = numberOfCells;\n\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  useEffect(() => {\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j]}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n  }, [reload])\n\n\n  const startSimulation = () => {\n\n    if (!simulateRef.current) {\n      return \n    }\n\n    console.log('START', numberOfCells, numberOfCellsRef, numberOfCells > 0)\n\n    //check if the grid is not empty\n    // if (numberOfCellsRef.current > 0) {\n\n      setGrid(grid => {\n        return produce(grid, gridCopy => {\n\n          // make cells wrap around the grid\n          const coordinates = {};\n          wrapCellsAround(grid, coordinates);\n\n\n          for (let i = 0; i < grid.length; i++) {\n\n            for (let j = 0; j < grid[i].length; j++) {\n\n              if (grid[i][j].alive === true) {\n                countNeighbors(grid, gridCopy, coordinates, i, j, true, \n                  numberOfCells,\nsetNumberOfCells,\nnumberOfCellsRef,\n                  )\n              }\n              if (grid[i][j].alive === false) {\n                countNeighbors(grid, gridCopy, coordinates, i, j, false,\n                  numberOfCells,\nsetNumberOfCells,\nnumberOfCellsRef\n                  )\n\n              }\n            }\n          }\n        });\n\n      });\n\n      setTimeout(startSimulation, 1000)\n    // }\n\n  }\n\n\n  const pauseSimulation = () => {\n    setSimulate(false)\n  }\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setNumberOfCells(0);\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n\n            <Grid grid={grid} setGrid={setGrid} \n                  setDisable={setDisable} \n                  numberOfCells={numberOfCells} \n                  setNumberOfCells={setNumberOfCells} \n                  numberOfCellsRef={numberOfCellsRef}\n                  />\n\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n\n                return <Preset preset={preset} key={i} \n                               setSelectedPreset={setSelectedPreset} \n                               selectedPreset={selectedPreset}\n                               setGrid={setGrid}\n                               />\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={() => {\n                      setSimulate(!simulate);\n                      simulateRef.current = true;\n                      startSimulation();\n                      }}\n                    disabled={simulate || disable || numberOfCells === 0 ? true : false}\n            >Play\n            </button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={clearSimulation}>Clear</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}