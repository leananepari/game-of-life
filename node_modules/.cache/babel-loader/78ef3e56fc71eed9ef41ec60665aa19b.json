{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/src/components/Main.js\";\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\nimport img from '../assets/bracket.png';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const selectedPresetRef = useRef(selectedPreset);\n  selectedPresetRef.current = selectedPreset;\n  const presets = [{\n    name: 'Spaceships',\n    func: preset1\n  }, {\n    name: 'Oscillators',\n    func: preset2\n  }, {\n    name: 'Glider Gun',\n    func: preset3\n  }, {\n    name: 'Randomize',\n    func: randomPreset\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  const [generation, setGeneration] = useState(0);\n  useEffect(() => {\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(75);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j],\n            age: 1\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n  }, [reload]);\n  const startSimulation = useCallback(selectedPreset => {\n    console.log('HERE', selectedPresetRef.current);\n\n    if (!simulateRef.current) {\n      return;\n    }\n\n    setGeneration(num => num + 1);\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        // make cells wrap around the grid \n        // if it's glider gun pattern don't wrap cells so that it runs infinitely\n        const coordinates = {};\n        let gliderGun = false;\n\n        if (selectedPresetRef.current === 'Glider Gun') {\n          gliderGun = true;\n        }\n\n        wrapCellsAround(grid, coordinates, gliderGun);\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true);\n            }\n\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false);\n            }\n          }\n        }\n      });\n    });\n    setTimeout(() => {\n      startSimulation();\n    }, 0);\n  }, []);\n\n  const pauseSimulation = () => {\n    setSimulate(false);\n  };\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"rules\"), /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: '65px',\n      height: '65px'\n    },\n    src: img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rules\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"1. live cell with fewer than two live neighbours dies (underpopulation)\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"2. live cell with more than three live neighbours dies (overpopulation)\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"3. dead cell with exactly three live neighbours becomes a live cell (reproduction)\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"4. live cell with two or three live neighbours lives on to the next generation\")))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"__generation: # \", generation), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation(selectedPreset);\n    },\n    disabled: simulate ? true : false,\n    style: {\n      border: '1px solid #CC00FF'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"Clear\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      setGrid: setGrid,\n      setGeneration: setGeneration,\n      selectedPresetRef: selectedPresetRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 20\n      }\n    });\n  }))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/src/components/Main.js"],"names":["React","useEffect","useState","useRef","useCallback","Preset","Grid","produce","preset1","preset2","preset3","randomPreset","countNeighbors","wrapCellsAround","img","Main","grid","setGrid","selectedPreset","setSelectedPreset","selectedPresetRef","current","presets","name","func","reload","setReload","simulate","setSimulate","simulateRef","generation","setGeneration","arr","Array","i","length","j","alive","coor","age","startSimulation","console","log","num","gridCopy","coordinates","gliderGun","setTimeout","pauseSimulation","clearSimulation","display","alignItems","fontSize","width","height","border","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\nimport img from '../assets/bracket.png';\n\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const selectedPresetRef = useRef(selectedPreset);\n  selectedPresetRef.current = selectedPreset;\n\n  const presets = [{name: 'Spaceships', func: preset1}, \n                   {name: 'Oscillators', func: preset2},\n                   {name: 'Glider Gun', func: preset3},\n                   {name: 'Randomize', func: randomPreset}]\n  const [reload, setReload] = useState(false);\n\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  const [generation, setGeneration] = useState(0);\n\n\n  useEffect(() => {\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(75)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j], age: 1}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n  }, [reload])\n\n\n  const startSimulation = useCallback((selectedPreset) => {\n\n    console.log('HERE', selectedPresetRef.current)\n\n    if (!simulateRef.current) {\n      return \n    }\n\n    setGeneration((num) => num + 1)\n\n\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n\n        // make cells wrap around the grid \n        // if it's glider gun pattern don't wrap cells so that it runs infinitely\n        const coordinates = {};\n        let gliderGun = false;\n        if (selectedPresetRef.current === 'Glider Gun') {\n          gliderGun = true;\n        }\n        wrapCellsAround(grid, coordinates, gliderGun);\n        \n\n        for (let i = 0; i < grid.length; i++) {\n\n          for (let j = 0; j < grid[i].length; j++) {\n\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true)\n            }\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false)\n\n            }\n          }\n        }\n      });\n\n    });\n\n    setTimeout(() => {\n      startSimulation()\n    }, 0)\n\n  }, [])\n\n\n  const pauseSimulation = () => {\n    setSimulate(false)\n  }\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <header>\n        <h1>Game of Life</h1>\n        <div style={{display: 'flex', alignItems: 'center'}}>\n          <div style={{fontSize: '16px'}}>rules</div>\n          <img style={{width: '65px', height: '65px'}} src={img}/>\n          <div className=\"rules\">\n            <div>1. live cell with fewer than two live neighbours dies (underpopulation)</div>\n            <div>2. live cell with more than three live neighbours dies (overpopulation)</div>\n            <div>3. dead cell with exactly three live neighbours becomes a live cell (reproduction)</div>\n            <div>4. live cell with two or three live neighbours lives on to the next generation</div>\n          </div>\n        </div>\n      </header>\n\n      <h2>__generation: # {generation}</h2>\n\n      <Grid grid={grid} setGrid={setGrid} />\n\n      <div className=\"buttons\">\n        <div className=\"btn-wrap\">\n          <button onClick={() => {\n                    setSimulate(!simulate);\n                    simulateRef.current = true;\n                    startSimulation(selectedPreset);\n                    }}\n                  disabled={simulate ? true : false} style={{border: '1px solid #CC00FF'}}>Play</button>\n          <button onClick={pauseSimulation}>Pause</button>\n          <button onClick={clearSimulation}>Clear</button>\n        </div>\n        <div className=\"presets\">\n          {presets.map((preset, i) => {\n\n            return <Preset preset={preset} key={i} \n                            setSelectedPreset={setSelectedPreset} \n                            selectedPreset={selectedPreset}\n                            setGrid={setGrid}\n                            setGeneration={setGeneration}\n                            selectedPresetRef={selectedPresetRef}\n                            />\n          })}\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}