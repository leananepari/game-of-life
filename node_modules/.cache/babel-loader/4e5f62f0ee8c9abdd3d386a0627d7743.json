{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1'\n  }, {\n    name: 'Preset 2'\n  }, {\n    name: 'Preset 3'\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  useEffect(() => {\n    // build the grid 25x25\n    console.log('USE EFFECT MAIN');\n\n    if (simulate === false) {\n      console.log('IF NOT IN SIMULATION');\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false\n          };\n        }\n      }\n\n      arr[3][5]['alive'] = true;\n      arr[3][6]['alive'] = true;\n      arr[4][5]['alive'] = true;\n      arr[4][6]['alive'] = true;\n      arr[2][7]['alive'] = true;\n      arr[3][8]['alive'] = true;\n      arr[3][9]['alive'] = true;\n      arr[4][8]['alive'] = true;\n      arr[4][9]['alive'] = true;\n      arr[5][8]['alive'] = true;\n      arr[5][9]['alive'] = true;\n      arr[5][6]['alive'] = true;\n      arr[6][5]['alive'] = true;\n      arr[6][6]['alive'] = true;\n      arr[7][5]['alive'] = true;\n      arr[7][6]['alive'] = true;\n      arr[7][4]['alive'] = true;\n      arr[8][6]['alive'] = true;\n      arr[9][6]['alive'] = true;\n      arr[9][7]['alive'] = true;\n      arr[10][7]['alive'] = true;\n      arr[10][8]['alive'] = true;\n      arr[10][9]['alive'] = true;\n      arr[9][9]['alive'] = true;\n      arr[9][10]['alive'] = true;\n      arr[8][8]['alive'] = true; // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n\n      setGrid(arr);\n    }\n\n    console.log('RELOAD MAIN', reload);\n  }, [reload]);\n\n  const startSimulation = () => {\n    console.log('START'); // console.log('GRID', grid)\n\n    let buffer = new Array(25);\n\n    for (let i = 0; i < buffer.length; i++) {\n      buffer[i] = new Array(25);\n    }\n\n    for (let i = 0; i < buffer.length; i++) {\n      for (let j = 0; j < buffer[i].length; j++) {\n        buffer[i][j] = {\n          alive: false\n        };\n      }\n    }\n\n    const coordinates = {};\n\n    const build_top_edge = () => {\n      let index = 0; //add corner cells\n\n      coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n      coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n      while (index < grid.length) {\n        coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n        index++;\n      }\n    };\n\n    const build_bottom_edge = () => {\n      let index = 0; //add corner cells\n\n      coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n      coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n      while (index < grid.length) {\n        coordinates[`${grid.length},${index}`] = grid[0][index];\n        index++;\n      }\n    };\n\n    const build_left_edge = () => {\n      let index = 0;\n\n      while (index < grid.length) {\n        // buffer[index][0] = grid[index][grid.length - 1];\n        coordinates[`${index},-1`] = grid[index][grid.length - 1];\n        index++;\n      }\n    };\n\n    const build_right_edge = () => {\n      let index = 0;\n\n      while (index < grid.length) {\n        // buffer[index][buffer.length - 1] = grid[index][0];\n        coordinates[`${index},${grid.length}`] = grid[index][0];\n        index++;\n      }\n    };\n\n    build_top_edge();\n    build_bottom_edge();\n    build_left_edge();\n    build_right_edge();\n\n    const simulate = () => {\n      console.log('SIMULATE');\n      setSimulate(true);\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].alive === true) {\n            countNeighbors(buffer, coordinates, i, j, true);\n          } ///////////////////////////////////////////////////////////\n\n\n          if (grid[i][j].alive === false) {\n            countNeighbors(buffer, coordinates, i, j, false);\n          }\n        }\n      }\n\n      console.log('BUFFER', buffer);\n      setGrid(buffer);\n      setReload(!reload);\n      setTimeout(() => {\n        // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n        // console.log('IFFFFF')\n        // setReload(!reload)\n        console.log('RELOAD', reload); // setGrid(buffer);\n\n        startSimulation(); // }\n      }, 4000); // startSimulation();\n    };\n\n    simulate();\n  };\n\n  const countNeighbors = (buffer, coordinates, i, j, state) => {\n    let count_neighbors = 0; // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i - 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check top right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n      if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check cell to the right\n\n\n    if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n      if (coordinates[`${i},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom right corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n      if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j + 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check bottom cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n      if (coordinates[`${i + 1},${j}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j].alive === true) {\n        count_neighbors++;\n      }\n    } // check bottom left corner cell\n\n\n    if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n      if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i + 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // check cell to the left\n\n\n    if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n      if (coordinates[`${i},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } //check top left corner\n\n\n    if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n      if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n        count_neighbors++;\n      }\n    } else {\n      if (grid[i - 1][j - 1].alive === true) {\n        count_neighbors++;\n      }\n    } // should it stay alive or not\n\n\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    }\n  };\n\n  const pauseSimulation = () => {};\n\n  const stopSimulation = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }, \"Stop\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","Row","Preset","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","reload","setReload","simulate","setSimulate","console","log","arr","Array","i","length","j","alive","startSimulation","buffer","coordinates","build_top_edge","index","build_bottom_edge","build_left_edge","build_right_edge","countNeighbors","setTimeout","state","count_neighbors","hasOwnProperty","pauseSimulation","stopSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Row from './Row';\nimport Preset from './Preset';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1'}, {name: 'Preset 2'},\n                   {name: 'Preset 3'}]\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n\n  useEffect(() => {\n    // build the grid 25x25\n\n    console.log('USE EFFECT MAIN')\n\n    if (simulate === false) {\n      console.log('IF NOT IN SIMULATION')\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false}\n        }\n      }\n\n      arr[3][5]['alive'] = true\n      arr[3][6]['alive'] = true\n      arr[4][5]['alive'] = true\n      arr[4][6]['alive'] = true\n\n      arr[2][7]['alive'] = true\n      arr[3][8]['alive'] = true\n      arr[3][9]['alive'] = true\n\n      arr[4][8]['alive'] = true\n      arr[4][9]['alive'] = true\n      arr[5][8]['alive'] = true\n      arr[5][9]['alive'] = true\n\n      arr[5][6]['alive'] = true\n      arr[6][5]['alive'] = true\n      arr[6][6]['alive'] = true\n\n      arr[7][5]['alive'] = true\n      arr[7][6]['alive'] = true\n      arr[7][4]['alive'] = true\n\n      arr[8][6]['alive'] = true\n      arr[9][6]['alive'] = true\n      arr[9][7]['alive'] = true\n      arr[10][7]['alive'] = true\n      arr[10][8]['alive'] = true\n      arr[10][9]['alive'] = true\n      arr[9][9]['alive'] = true\n\n      arr[9][10]['alive'] = true\n      arr[8][8]['alive'] = true\n      // arr[5][15]['alive'] = true\n      // arr[5][16]['alive'] = true\n      // arr[5][17]['alive'] = true\n\n\n      // arr[13][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[14][5]['alive'] = true\n      // arr[14][6]['alive'] = true\n      // arr[4][7]['alive'] = true\n      setGrid(arr)\n    }\n    console.log('RELOAD MAIN', reload)\n\n  }, [reload])\n\n  const startSimulation = () => {\n    console.log('START')\n    // console.log('GRID', grid)\n    \n    let buffer = new Array(25);\n\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = new Array(25);\n    }\n\n    for (let i = 0; i < buffer.length; i++) {\n      for (let j = 0; j < buffer[i].length; j++) {\n        buffer[i][j] = {alive: false}\n      }\n    }\n    const coordinates = {};\n\n    const build_top_edge = () => {\n      let index = 0;\n\n      //add corner cells\n      coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n      coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n      while(index < grid.length) {\n        coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n        index ++;\n      }\n    }\n\n    const build_bottom_edge = () => {\n      let index = 0;\n\n      //add corner cells\n      coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n      coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n      while(index < grid.length) {\n        coordinates[`${grid.length},${index}`] = grid[0][index];\n        index ++;\n      }\n \n    }\n\n    const build_left_edge = () => {\n      let index = 0;\n\n      while(index < grid.length) {\n        // buffer[index][0] = grid[index][grid.length - 1];\n        coordinates[`${index},-1`] = grid[index][grid.length - 1];\n        index ++;\n      }\n\n    }\n\n    const build_right_edge = () => {\n      let index = 0;\n\n      while(index < grid.length) {\n        // buffer[index][buffer.length - 1] = grid[index][0];\n        coordinates[`${index},${grid.length}`] = grid[index][0];\n        index ++;\n      }\n    }\n\n    build_top_edge();\n    build_bottom_edge();\n    build_left_edge();\n    build_right_edge();\n\n\n    const simulate = () => {\n      console.log('SIMULATE')\n      setSimulate(true);\n      for (let i = 0; i < grid.length; i++) {\n\n        for (let j = 0; j < grid[i].length; j++) {\n\n          if (grid[i][j].alive === true) {\n            countNeighbors(buffer, coordinates, i, j, true)\n          }\n          ///////////////////////////////////////////////////////////\n\n          if (grid[i][j].alive === false) {\n            countNeighbors(buffer, coordinates, i, j, false)\n\n          }\n        }\n      }\n      console.log('BUFFER', buffer)\n\n      setGrid(buffer);\n      setReload(!reload)\n\n      setTimeout(() => {\n\n        // if (JSON.stringify(grid) !== JSON.stringify(buffer)) {\n          // console.log('IFFFFF')\n\n          // setReload(!reload)\n          console.log('RELOAD', reload)\n\n          // setGrid(buffer);\n          startSimulation();\n        // }\n      }, 4000)\n      // startSimulation();\n    }\n    simulate();\n\n  }\n\n  const countNeighbors = (buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // console.log('coordinates', coordinates)\n    // console.log('index', i, j)\n    // console.log('buffer', buffer)\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      // console.log('TRUEEEEEEE')\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors !== 2 && count_neighbors !== 3) {\n        buffer[i][j].alive = false;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n      } else {\n        buffer[i][j] = grid[i][j];\n      }\n    }\n  }\n\n  const pauseSimulation = () => {\n\n  }\n\n  const stopSimulation = () => {\n\n  }\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n            {/* <div className=\"grid\">\n              <div style={{}}>\n                {grid.map((row, i)=> {\n                  return <Row row={row} key={i}/>\n                })}\n              </div>\n            </div> */}\n            <Grid grid={grid} />\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n                return <Preset preset={preset} key={i} setSelectedPreset={setSelectedPreset} selectedPreset={selectedPreset}/>\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={startSimulation}>Play</button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={stopSimulation}>Stop</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}