{"ast":null,"code":"import produce from 'immer';\nexport const preset1 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[3][5]['alive'] = true;\n      gridCopy[3][6]['alive'] = true;\n      gridCopy[3][7]['alive'] = true;\n      gridCopy[8][6]['alive'] = true;\n      gridCopy[9][7]['alive'] = true;\n      gridCopy[10][5]['alive'] = true;\n      gridCopy[10][6]['alive'] = true;\n      gridCopy[10][7]['alive'] = true;\n      gridCopy[6][15]['alive'] = true;\n      gridCopy[6][16]['alive'] = true;\n      gridCopy[6][17]['alive'] = true;\n      gridCopy[12][16]['alive'] = true;\n      gridCopy[13][17]['alive'] = true;\n      gridCopy[14][15]['alive'] = true;\n      gridCopy[14][16]['alive'] = true;\n      gridCopy[14][17]['alive'] = true;\n      gridCopy[9][25]['alive'] = true;\n      gridCopy[9][26]['alive'] = true;\n      gridCopy[9][27]['alive'] = true;\n      gridCopy[12][16]['alive'] = true;\n      gridCopy[13][17]['alive'] = true;\n      gridCopy[14][15]['alive'] = true;\n      gridCopy[14][16]['alive'] = true;\n      gridCopy[14][17]['alive'] = true;\n      gridCopy[12][35]['alive'] = true;\n      gridCopy[12][36]['alive'] = true;\n      gridCopy[12][37]['alive'] = true;\n    });\n  });\n};\nexport const preset2 = setGrid => {\n  clearGrid(setGrid);\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      gridCopy[3][5]['alive'] = true;\n      gridCopy[3][6]['alive'] = true;\n      gridCopy[4][6]['alive'] = true;\n      gridCopy[4][5]['alive'] = true;\n      gridCopy[2][7]['alive'] = true;\n      gridCopy[3][8]['alive'] = true;\n      gridCopy[3][9]['alive'] = true;\n      gridCopy[4][8]['alive'] = true;\n      gridCopy[4][9]['alive'] = true;\n      gridCopy[5][8]['alive'] = true;\n      gridCopy[5][9]['alive'] = true;\n      gridCopy[5][6]['alive'] = true;\n      gridCopy[6][5]['alive'] = true;\n      gridCopy[6][6]['alive'] = true;\n      gridCopy[7][5]['alive'] = true;\n      gridCopy[7][6]['alive'] = true;\n      gridCopy[7][4]['alive'] = true;\n      gridCopy[8][6]['alive'] = true;\n      gridCopy[9][6]['alive'] = true;\n      gridCopy[9][7]['alive'] = true;\n      gridCopy[10][7]['alive'] = true;\n      gridCopy[10][8]['alive'] = true;\n      gridCopy[10][9]['alive'] = true;\n      gridCopy[9][9]['alive'] = true;\n      gridCopy[9][10]['alive'] = true;\n      gridCopy[8][8]['alive'] = true;\n    });\n  });\n};\nexport const preset3 = setGrid => {};\nexport const randomPreset = setGrid => {\n  setGrid(grid => {\n    return produce(grid, gridCopy => {\n      for (let i = 0; i < grid.length; i++) {\n        let k = Math.floor(Math.random() * (grid.length - 1) + 1);\n        let j = Math.floor(Math.random() * (grid[0].length - 1) + 1);\n        gridCopy[k][j].alive = true;\n\n        for (let l = 0; l < grid[i].length; l++) {\n          let k = Math.floor(Math.random() * (grid.length - 1) + 1);\n          let j = Math.floor(Math.random() * (grid[0].length - 1) + 1);\n          gridCopy[k][j].alive = true;\n        }\n      }\n    });\n  });\n};\n\nconst clearGrid = setGrid => {\n  let arr = new Array(25);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(55);\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {\n        alive: false,\n        coor: [i, j]\n      };\n    }\n  }\n\n  setGrid(arr);\n};\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n  let count_neighbors = 0; // check the top cell\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j}`)) {\n    if (coordinates[`${i - 1},${j}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check top right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j + 1}`)) {\n    if (coordinates[`${i - 1},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check cell to the right\n\n\n  if (coordinates.hasOwnProperty(`${i},${j + 1}`)) {\n    if (coordinates[`${i},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom right corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j + 1}`)) {\n    if (coordinates[`${i + 1},${j + 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j + 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check bottom cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j}`)) {\n    if (coordinates[`${i + 1},${j}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j].alive === true) {\n      count_neighbors++;\n    }\n  } // check bottom left corner cell\n\n\n  if (coordinates.hasOwnProperty(`${i + 1},${j - 1}`)) {\n    if (coordinates[`${i + 1},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i + 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // check cell to the left\n\n\n  if (coordinates.hasOwnProperty(`${i},${j - 1}`)) {\n    if (coordinates[`${i},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } //check top left corner\n\n\n  if (coordinates.hasOwnProperty(`${i - 1},${j - 1}`)) {\n    if (coordinates[`${i - 1},${j - 1}`].alive === true) {\n      count_neighbors++;\n    }\n  } else {\n    if (grid[i - 1][j - 1].alive === true) {\n      count_neighbors++;\n    }\n  } // should it stay alive or not\n\n\n  if (state === true) {\n    if (count_neighbors < 2 || count_neighbors > 3) {\n      buffer[i][j].alive = false;\n    }\n  } else if (state === false) {\n    if (count_neighbors === 3) {\n      buffer[i][j].alive = true;\n    }\n  }\n\n  buffer[i][j].age += 1;\n};\nexport const wrapCellsAround = (grid, coordinates) => {\n  const build_top_row = () => {\n    let index = 0; //add corner cells\n\n    coordinates['-1,-1'] = grid[grid.length - 1][grid[0].length - 1];\n    coordinates[`-1,${grid[0].length}`] = grid[grid.length - 1][0];\n\n    while (index < grid[0].length) {\n      coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n      index++;\n    }\n  };\n\n  const build_bottom_row = () => {\n    let index = 0; //add corner cells\n\n    coordinates[`${grid.length},-1`] = grid[0][grid.length - 1];\n    coordinates[`${grid.length},${grid[0].length}`] = grid[0][0];\n\n    while (index < grid[0].length) {\n      coordinates[`${grid.length},${index}`] = grid[0][index];\n      index++;\n    }\n  };\n\n  const build_left_col = () => {\n    let index = 0;\n\n    while (index < grid.length) {\n      coordinates[`${index},-1`] = grid[index][grid[0].length - 1];\n      index++;\n    }\n  };\n\n  const build_right_col = () => {\n    let index = 0;\n\n    while (index < grid.length) {\n      coordinates[`${index},${grid[0].length}`] = grid[index][0];\n      index++;\n    }\n  };\n\n  build_top_row();\n  build_bottom_row();\n  build_left_col();\n  build_right_col();\n};","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/utils/helper.js"],"names":["produce","preset1","setGrid","clearGrid","grid","gridCopy","preset2","preset3","randomPreset","i","length","k","Math","floor","random","j","alive","l","arr","Array","coor","countNeighbors","buffer","coordinates","state","count_neighbors","hasOwnProperty","age","wrapCellsAround","build_top_row","index","build_bottom_row","build_left_col","build_right_col"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\nexport const preset1 = (setGrid) => {\n\n    clearGrid(setGrid);\n\n    setGrid(grid => {\n\n      return produce(grid, gridCopy => {\n\n        gridCopy[3][5]['alive'] = true\n        gridCopy[3][6]['alive'] = true\n        gridCopy[3][7]['alive'] = true\n\n        gridCopy[8][6]['alive'] = true\n        gridCopy[9][7]['alive'] = true\n        gridCopy[10][5]['alive'] = true\n        gridCopy[10][6]['alive'] = true\n        gridCopy[10][7]['alive'] = true\n\n        gridCopy[6][15]['alive'] = true\n        gridCopy[6][16]['alive'] = true\n        gridCopy[6][17]['alive'] = true\n\n        gridCopy[12][16]['alive'] = true\n        gridCopy[13][17]['alive'] = true\n        gridCopy[14][15]['alive'] = true\n        gridCopy[14][16]['alive'] = true\n        gridCopy[14][17]['alive'] = true\n\n        gridCopy[9][25]['alive'] = true\n        gridCopy[9][26]['alive'] = true\n        gridCopy[9][27]['alive'] = true\n\n        gridCopy[12][16]['alive'] = true\n        gridCopy[13][17]['alive'] = true\n        gridCopy[14][15]['alive'] = true\n        gridCopy[14][16]['alive'] = true\n        gridCopy[14][17]['alive'] = true\n\n        gridCopy[12][35]['alive'] = true\n        gridCopy[12][36]['alive'] = true\n        gridCopy[12][37]['alive'] = true\n\n      })\n    })\n\n}\n\nexport const preset2 = (setGrid) => {\n\n  clearGrid(setGrid);\n\n  setGrid(grid => {\n\n    return produce(grid, gridCopy => {\n\n      gridCopy[3][5]['alive'] = true\n      gridCopy[3][6]['alive'] = true\n      gridCopy[4][6]['alive'] = true\n      gridCopy[4][5]['alive'] = true\n    \n      gridCopy[2][7]['alive'] = true\n      gridCopy[3][8]['alive'] = true\n      gridCopy[3][9]['alive'] = true\n    \n      gridCopy[4][8]['alive'] = true\n      gridCopy[4][9]['alive'] = true\n      gridCopy[5][8]['alive'] = true\n      gridCopy[5][9]['alive'] = true\n    \n      gridCopy[5][6]['alive'] = true\n      gridCopy[6][5]['alive'] = true\n      gridCopy[6][6]['alive'] = true\n    \n      gridCopy[7][5]['alive'] = true\n      gridCopy[7][6]['alive'] = true\n      gridCopy[7][4]['alive'] = true\n    \n      gridCopy[8][6]['alive'] = true\n      gridCopy[9][6]['alive'] = true\n      gridCopy[9][7]['alive'] = true\n      gridCopy[10][7]['alive'] = true\n      gridCopy[10][8]['alive'] = true\n      gridCopy[10][9]['alive'] = true\n      gridCopy[9][9]['alive'] = true\n    \n      gridCopy[9][10]['alive'] = true\n      gridCopy[8][8]['alive'] = true\n\n    })\n  })\n\n}\n\nexport const preset3 = (setGrid) => {\n\n}\n\nexport const randomPreset = (setGrid) => {\n\n    setGrid(grid => {\n\n      return produce(grid, gridCopy => {\n\n        for (let i = 0; i < grid.length; i++) {\n          let k = Math.floor((Math.random() * (grid.length - 1)) + 1);\n          let j = Math.floor((Math.random() * (grid[0].length - 1)) + 1);\n          gridCopy[k][j].alive = true;\n\n          for (let l = 0; l < grid[i].length; l++) {\n            let k = Math.floor((Math.random() * (grid.length - 1)) + 1);\n            let j = Math.floor((Math.random() * (grid[0].length - 1)) + 1);\n            gridCopy[k][j].alive = true;\n          }\n        }\n\n      })\n    })\n}\n\n\nconst clearGrid = (setGrid) => {\n\n  let arr = new Array(25);\n      \n  for(let i = 0; i < arr.length; i++) {\n    arr[i] = new Array(55)\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      arr[i][j] = {alive: false, coor: [i,j]}\n    }\n  }\n  setGrid(arr)\n\n}\n\nexport const countNeighbors = (grid, buffer, coordinates, i, j, state) => {\n\n    let count_neighbors = 0;\n\n    // check the top cell\n    if (coordinates.hasOwnProperty(`${i-1},${j}`)) {\n      if (coordinates[`${i-1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check top right corner cell\n    if (coordinates.hasOwnProperty(`${i-1},${j+1}`)) {\n      if (coordinates[`${i-1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check cell to the right\n    if (coordinates.hasOwnProperty(`${i},${j+1}`)) {\n      if (coordinates[`${i},${j+1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom right corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j+1}`)) {\n      if (coordinates[`${i+1},${j+1}`].alive === true) {\n        count_neighbors ++;\n      } \n    } else {\n      if (grid[i+1][j+1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check bottom cell\n    if (coordinates.hasOwnProperty(`${i+1},${j}`)) {\n      if (coordinates[`${i+1},${j}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check bottom left corner cell\n    if (coordinates.hasOwnProperty(`${i+1},${j-1}`)) {\n      if (coordinates[`${i+1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i+1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // check cell to the left\n    if (coordinates.hasOwnProperty(`${i},${j-1}`)) {\n      if (coordinates[`${i},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    //check top left corner\n    if (coordinates.hasOwnProperty(`${i-1},${j-1}`)) {\n      if (coordinates[`${i-1},${j-1}`].alive === true) {\n        count_neighbors ++;\n      }\n    } else {\n      if (grid[i-1][j-1].alive === true) {\n        count_neighbors ++;\n      }\n    }\n\n    // should it stay alive or not\n    if (state === true) {\n      if (count_neighbors < 2 || count_neighbors > 3) {\n        buffer[i][j].alive = false;\n\n      } \n    } else if (state === false) {\n      if (count_neighbors === 3) {\n        buffer[i][j].alive = true;\n\n      } \n    }\n    buffer[i][j].age += 1;\n  }\n\n\nexport const wrapCellsAround = (grid, coordinates) => {\n\n  const build_top_row = () => {\n    let index = 0;\n\n    //add corner cells\n    coordinates['-1,-1'] = grid[grid.length - 1][grid[0].length - 1];\n    coordinates[`-1,${grid[0].length}`] = grid[grid.length - 1][0];\n\n    while(index < grid[0].length) {\n      coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n      index ++;\n    }\n  }\n\n  const build_bottom_row = () => {\n    let index = 0;\n\n    //add corner cells\n    coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n    coordinates[`${grid.length},${grid[0].length}`] = grid[0][0];\n\n    while(index < grid[0].length) {\n      coordinates[`${grid.length},${index}`] = grid[0][index];\n      index ++;\n    }\n\n  }\n\n  const build_left_col = () => {\n    let index = 0;\n\n    while(index < grid.length) {\n      coordinates[`${index},-1`] = grid[index][grid[0].length - 1];\n      index ++;\n    }\n\n  }\n\n  const build_right_col = () => {\n    let index = 0;\n\n    while(index < grid.length) {\n      coordinates[`${index},${grid[0].length}`] = grid[index][0];\n      index ++;\n    }\n  }\n  build_top_row();\n  build_bottom_row();\n  build_left_col();\n  build_right_col();\n\n}"]},"metadata":{},"sourceType":"module"}