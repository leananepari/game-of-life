{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1',\n    func: preset1\n  }, {\n    name: 'Preset 2',\n    func: preset2\n  }, {\n    name: 'Preset 3',\n    func: preset3\n  }, {\n    name: 'Random',\n    func: randomPreset\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  const [generation, setGeneration] = useState(0);\n  const generationRef = useRef(generation);\n  generationRef.current = generation;\n  useEffect(() => {\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j]\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n  }, [reload]);\n\n  const startSimulation = () => {\n    // if (!simulateRef.current) {\n    //   return \n    // }\n    // setGeneration((num) => num + 1)\n    // setGrid(grid => {\n    //   return produce(grid, gridCopy => {\n    //     // make cells wrap around the grid\n    //     const coordinates = {};\n    //     wrapCellsAround(grid, coordinates);\n    //     for (let i = 0; i < grid.length; i++) {\n    //       for (let j = 0; j < grid[i].length; j++) {\n    //         if (grid[i][j].alive === true) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n    //         }\n    //         if (grid[i][j].alive === false) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n    //         }\n    //       }\n    //     }\n    //   });\n    // });\n    //   setTimeout(() => {\n    //     startSimulation()\n    //   }, 1000)\n    if (!simulateRef.current) {\n      return;\n    } // let buffer = [...grid];\n    // make cells wrap around the grid\n\n\n    const coordinates = {};\n    wrapCellsAround(grid, coordinates); // const loop = (grid, coordinates) => {\n\n    let buffer = new Array(25);\n\n    for (let i = 0; i < grid.length; i++) {\n      buffer[i] = grid[i].slice();\n\n      for (let j = 0; j < grid[i][j].length; j++) {\n        buffer[i][j] = Object.assign({}, grid[i][j]);\n      }\n    }\n\n    console.log('BUFFER', buffer);\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j].alive === true) {\n          countNeighbors(grid, buffer, coordinates, i, j, true);\n        }\n\n        if (grid[i][j].alive === false) {\n          countNeighbors(grid, buffer, coordinates, i, j, false);\n        }\n      }\n    }\n\n    setGrid(buffer);\n    setTimeout(() => {\n      // loop(buffer)\n      startSimulation();\n    }, 1000); // }\n  };\n\n  const pauseSimulation = () => {\n    setSimulate(false);\n  };\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Generation: # \", generationRef.current), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      setGrid: setGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation();\n    },\n    disabled: simulate ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Clear\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Preset","Grid","produce","preset1","preset2","preset3","randomPreset","countNeighbors","wrapCellsAround","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","func","reload","setReload","simulate","setSimulate","simulateRef","current","generation","setGeneration","generationRef","arr","Array","i","length","j","alive","coor","startSimulation","coordinates","buffer","slice","Object","assign","console","log","setTimeout","pauseSimulation","clearSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, randomPreset, countNeighbors, wrapCellsAround } from '../utils/helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1', func: preset1}, \n                   {name: 'Preset 2', func: preset2},\n                   {name: 'Preset 3', func: preset3},\n                   {name: 'Random', func: randomPreset}]\n  const [reload, setReload] = useState(false);\n\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  const [generation, setGeneration] = useState(0);\n  const generationRef = useRef(generation);\n  generationRef.current = generation;\n\n  useEffect(() => {\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j]}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n  }, [reload])\n\n\n  const startSimulation = () => {\n\n    // if (!simulateRef.current) {\n    //   return \n    // }\n\n    // setGeneration((num) => num + 1)\n\n    // setGrid(grid => {\n    //   return produce(grid, gridCopy => {\n\n    //     // make cells wrap around the grid\n    //     const coordinates = {};\n    //     wrapCellsAround(grid, coordinates);\n\n\n    //     for (let i = 0; i < grid.length; i++) {\n\n    //       for (let j = 0; j < grid[i].length; j++) {\n\n    //         if (grid[i][j].alive === true) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, true)\n    //         }\n    //         if (grid[i][j].alive === false) {\n    //           countNeighbors(grid, gridCopy, coordinates, i, j, false)\n\n    //         }\n    //       }\n    //     }\n    //   });\n\n    // });\n\n    //   setTimeout(() => {\n    //     startSimulation()\n    //   }, 1000)\n\n\n    if (!simulateRef.current) {\n      return \n    }\n\n    \n\n\n        // let buffer = [...grid];\n\n        // make cells wrap around the grid\n        const coordinates = {};\n        wrapCellsAround(grid, coordinates);\n\n        // const loop = (grid, coordinates) => {\n\n          let buffer = new Array(25);\n\n          for (let i = 0; i < grid.length; i++) {\n            buffer[i] = grid[i].slice();\n\n            for (let j = 0; j < grid[i][j].length; j++) {\n              buffer[i][j] = Object.assign({}, grid[i][j]);\n            }\n          }\n          \n          console.log('BUFFER', buffer)\n\n          for (let i = 0; i < grid.length; i++) {\n    \n            for (let j = 0; j < grid[i].length; j++) {\n    \n              if (grid[i][j].alive === true) {\n                countNeighbors(grid, buffer, coordinates, i, j, true)\n              }\n              if (grid[i][j].alive === false) {\n                countNeighbors(grid, buffer, coordinates, i, j, false)\n    \n              }\n            }\n          }\n          setGrid(buffer)\n\n          setTimeout(() => {\n            // loop(buffer)\n            startSimulation();\n          }, 1000)\n\n        // }\n    \n\n  }\n\n\n  const pauseSimulation = () => {\n    setSimulate(false)\n  }\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n    setGeneration(0);\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: # {generationRef.current}</h2>\n          <div className=\"grid-wrap\">\n\n            <Grid grid={grid} setGrid={setGrid} />\n\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n\n                return <Preset preset={preset} key={i} \n                               setSelectedPreset={setSelectedPreset} \n                               selectedPreset={selectedPreset}\n                               setGrid={setGrid}\n                               />\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={() => {\n                      setSimulate(!simulate);\n                      simulateRef.current = true;\n                      startSimulation();\n                      }}\n                    disabled={simulate ? true : false}\n            >Play\n            </button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={clearSimulation}>Clear</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}