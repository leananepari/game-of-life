{"ast":null,"code":"var _jsxFileName = \"/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, countNeighbors, wrapCellsAround } from './helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{\n    name: 'Preset 1',\n    func: preset1\n  }, {\n    name: 'Preset 2',\n    func: preset2\n  }, {\n    name: 'Preset 3',\n    func: preset3\n  }];\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n  useEffect(() => {\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25);\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {\n            alive: false,\n            coor: [i, j]\n          };\n        }\n      }\n\n      setGrid(arr);\n    }\n  }, [reload]);\n\n  const startSimulation = () => {\n    if (!simulateRef.current) {\n      return;\n    }\n\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        // const coordinates = {};\n        // const build_top_row = () => {\n        //   let index = 0;\n        //   //add corner cells\n        //   coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n        //   coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n        //   while(index < grid.length) {\n        //     coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n        //     index ++;\n        //   }\n        // }\n        // const build_bottom_row = () => {\n        //   let index = 0;\n        //   //add corner cells\n        //   coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n        //   coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n        //   while(index < grid.length) {\n        //     coordinates[`${grid.length},${index}`] = grid[0][index];\n        //     index ++;\n        //   }\n        // }\n        // const build_left_col = () => {\n        //   let index = 0;\n        //   while(index < grid.length) {\n        //     coordinates[`${index},-1`] = grid[index][grid.length - 1];\n        //     index ++;\n        //   }\n        // }\n        // const build_right_col = () => {\n        //   let index = 0;\n        //   while(index < grid.length) {\n        //     coordinates[`${index},${grid.length}`] = grid[index][0];\n        //     index ++;\n        //   }\n        // }\n        // build_top_row();\n        // build_bottom_row();\n        // build_left_col();\n        // build_right_col();\n        wrapCellsAround(grid);\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true);\n            }\n\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false);\n            }\n          }\n        }\n      });\n    });\n    setTimeout(startSimulation, 1000);\n  };\n\n  const pauseSimulation = () => {\n    setSimulate(false);\n  };\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Conway's Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"boxes-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Generation: #\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    setGrid: setGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"presets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, presets.map((preset, i) => {\n    return /*#__PURE__*/React.createElement(Preset, {\n      preset: preset,\n      key: i,\n      setSelectedPreset: setSelectedPreset,\n      selectedPreset: selectedPreset,\n      setGrid: setGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 24\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setSimulate(!simulate);\n      simulateRef.current = true;\n      startSimulation();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pauseSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"Clear\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Rules:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"item\")))));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/leanan/Desktop/coding/game-of-life/client/src/components/Main.js"],"names":["React","useEffect","useState","useRef","Preset","Grid","produce","preset1","preset2","preset3","countNeighbors","wrapCellsAround","Main","grid","setGrid","selectedPreset","setSelectedPreset","presets","name","func","reload","setReload","simulate","setSimulate","simulateRef","current","arr","Array","i","length","j","alive","coor","startSimulation","gridCopy","coordinates","setTimeout","pauseSimulation","clearSimulation","map","preset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Preset from './Preset';\nimport Grid from './Grid';\nimport produce from 'immer';\nimport { preset1, preset2, preset3, countNeighbors, wrapCellsAround } from './helper';\n\nconst Main = () => {\n  const [grid, setGrid] = useState([]);\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const presets = [{name: 'Preset 1', func: preset1}, \n                   {name: 'Preset 2', func: preset2},\n                   {name: 'Preset 3', func: preset3}]\n  const [reload, setReload] = useState(false);\n  const [simulate, setSimulate] = useState(false);\n  const simulateRef = useRef(simulate);\n  simulateRef.current = simulate;\n\n  useEffect(() => {\n\n    if (!simulateRef.current) {\n      let arr = new Array(25);\n      \n      for(let i = 0; i < arr.length; i++) {\n        arr[i] = new Array(25)\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          arr[i][j] = {alive: false, coor: [i,j]}\n        }\n      }\n      setGrid(arr)\n\n    } \n\n  }, [reload])\n\n\n  const startSimulation = () => {\n\n    if (!simulateRef.current) {\n      return \n    }\n\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n\n        // const coordinates = {};\n\n        // const build_top_row = () => {\n        //   let index = 0;\n\n        //   //add corner cells\n        //   coordinates['-1,-1'] = grid[grid.length - 1][grid.length - 1];\n        //   coordinates[`-1,${grid.length}`] = grid[grid.length - 1][0];\n\n        //   while(index < grid.length) {\n        //     coordinates[`-1,${index}`] = grid[grid.length - 1][index];\n        //     index ++;\n        //   }\n        // }\n\n        // const build_bottom_row = () => {\n        //   let index = 0;\n\n        //   //add corner cells\n        //   coordinates[`${grid.length},-1`] = grid[0][grid.length-1];\n        //   coordinates[`${grid.length},${grid.length}`] = grid[0][0];\n\n        //   while(index < grid.length) {\n        //     coordinates[`${grid.length},${index}`] = grid[0][index];\n        //     index ++;\n        //   }\n    \n        // }\n\n        // const build_left_col = () => {\n        //   let index = 0;\n\n        //   while(index < grid.length) {\n        //     coordinates[`${index},-1`] = grid[index][grid.length - 1];\n        //     index ++;\n        //   }\n\n        // }\n\n        // const build_right_col = () => {\n        //   let index = 0;\n\n        //   while(index < grid.length) {\n        //     coordinates[`${index},${grid.length}`] = grid[index][0];\n        //     index ++;\n        //   }\n        // }\n        // build_top_row();\n        // build_bottom_row();\n        // build_left_col();\n        // build_right_col();\n        wrapCellsAround(grid);\n\n        for (let i = 0; i < grid.length; i++) {\n\n          for (let j = 0; j < grid[i].length; j++) {\n\n            if (grid[i][j].alive === true) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, true)\n            }\n            if (grid[i][j].alive === false) {\n              countNeighbors(grid, gridCopy, coordinates, i, j, false)\n\n            }\n          }\n        }\n      });\n\n    });\n\n    setTimeout(startSimulation, 1000)\n\n  }\n\n\n  const pauseSimulation = () => {\n    setSimulate(false)\n  }\n\n  const clearSimulation = () => {\n    setSimulate(false);\n    setReload(!reload);\n    setSelectedPreset('');\n  }\n\n\n  return (\n    <div className=\"main-wrap\">\n\n      <h1>Conway's Game of Life</h1>\n\n      <div className=\"boxes-wrap\">\n\n        <div className=\"left-box\">\n          <h2>Generation: #</h2>\n          <div className=\"grid-wrap\">\n\n            <Grid grid={grid} setGrid={setGrid}/>\n            <div className=\"presets\">\n              {presets.map((preset, i) => {\n\n                return <Preset preset={preset} key={i} \n                               setSelectedPreset={setSelectedPreset} \n                               selectedPreset={selectedPreset}\n                               setGrid={setGrid}\n                               />\n              })}\n            </div>\n          </div>\n          <div className=\"buttons\">\n            <button onClick={() => {\n                      setSimulate(!simulate);\n                      simulateRef.current = true;\n                      startSimulation();\n                      }}>Play\n            </button>\n            <button onClick={pauseSimulation}>Pause</button>\n            <button onClick={clearSimulation}>Clear</button>\n          </div>\n        </div>\n\n        <div className=\"right-box\">\n          <h2>Rules:</h2>\n          <ul>\n            <li>item</li>\n            <li>item</li>\n            <li>item</li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}